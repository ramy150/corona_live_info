{"version":3,"file":"static/development/pages/index.js","sources":["webpack:///webpack/bootstrap","webpack:///./components/Block.tsx","webpack:///./components/Copyright.tsx","webpack:///./components/Header.tsx","webpack:///./components/Layout.tsx","webpack:///./components/NetworkGraph.js","webpack:///./components/StatBlock.tsx","webpack:///./components/Table.tsx","webpack:///./components/TableColumns.ts","webpack:///./pages/index.tsx","webpack:///./utils/chartDataHelper.ts","webpack:///external \"@chakra-ui/core\"","webpack:///external \"@emotion/styled\"","webpack:///external \"date-fns\"","webpack:///external \"date-fns-tz\"","webpack:///external \"isomorphic-unfetch\"","webpack:///external \"lodash.groupby\"","webpack:///external \"lodash.sortby\"","webpack:///external \"ml-regression-exponential\"","webpack:///external \"next/head\"","webpack:///external \"react\"","webpack:///external \"react-graph-vis\"","webpack:///external \"react-table\"","webpack:///external \"recharts\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","import styled from '@emotion/styled';\nimport {\n  Box, Heading, BoxProps, Flex\n} from \"@chakra-ui/core\";\n\nexport const StyledBox = styled(Box)`\n  background: white;\n  box-shadow: 0 6px 8px rgba(102,119,136,.03), 0 1px 2px rgba(102,119,136,.3);\n  overflow: hidden;\n  position: relative;\n`\n\ninterface BlockProps {\n  title: string;\n  footer?: string;\n  extraInfo?: string;\n}\n\nconst Block:React.FC<BoxProps & BlockProps> = ({ children, footer, title, extraInfo, ...rest}) => (\n  <StyledBox borderRadius={5} background=\"white\" {...rest}>\n    <Heading as=\"h3\" pt={8} pb={0} px={2} minHeight={'90px'} fontWeight=\"bold\" color=\"gray.600\" fontSize=\"1.3em\" textAlign=\"center\">{title}</Heading>\n    {children}\n    {footer && <Flex py={5} px={2} m={0} minHeight={80} alignItems=\"center\" justifyContent=\"center\" textAlign=\"center\" background=\"#f8f9fa\" borderTop=\"solid 1px rgba(102,119,136,.15)\" fontFamily=\"Space Mono\" fontSize=\"0.8em\" color=\"gray.700\"><div  dangerouslySetInnerHTML={{__html: footer}} /></Flex>}\n  </StyledBox>\n);\n\nexport default Block;","import { Box, Text, Link } from '@chakra-ui/core';\n\nconst Copyright: React.FC = props => (\n  <>\n    <Text mb=\"20px\" my={5} px={5} fontSize=\"1em\">Based on this GitHub project: <Link href=\"https://github.com/valstu/korona-info\" isExternal color=\"teal.500\">https://github.com/valstu/korona-info</Link> </Text>\n    <Box p={5} color=\"gray.500\" m={0} fontSize=\"sm\" mb={10} mt={0} textAlign=\"center\" maxWidth=\"1040px\">\n      <p><a title=\"CDC/ Alissa Eckert, MS; Dan Higgins, MAM / Public domain\" href=\"https://commons.wikimedia.org/wiki/File:2019-nCoV-CDC-23312_without_background.png\">Corona virus image is a work of the Centers for Disease Control and Prevention, part of the United States Department of Health and Human Services, taken or made as part of an employee's official duties. As a work of the U.S. federal government, the image is in the public domain.<br /> <strong>Author: CDC/ Alissa Eckert, MS; Dan Higgins, MAM (Public Domain)</strong></a></p>\n      <br />\n      <p><strong>MIT License</strong></p><br />\n      <p>Copyright (c) 2020 Helsingin Sanomat</p>\n      <br />\n\n      <p>Permission is hereby granted, free of charge, to any person obtaining a copy\n      of this software and associated documentation files (the \"Software\"), to deal\n      in the Software without restriction, including without limitation the rights\n      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n      copies of the Software, and to permit persons to whom the Software is\n      furnished to do so, subject to the following conditions:</p>\n\n      <p>The above copyright notice and this permission notice shall be included in all\n      copies or substantial portions of the Software.</p>\n      <br />\n      <p>\n        THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n        SOFTWARE.\n      </p>\n    </Box>\n  </>\n);\n\nexport default Copyright;","\nimport { Fragment } from 'react';\nimport Head from 'next/head';\nimport { Heading, Box, Text, Link, List, ListItem, Icon, Image } from '@chakra-ui/core';\n\nconst Header: React.FC = () => (\n  <Fragment>\n    <Head>\n      <link rel=\"apple-touch-icon-precomposed\" sizes=\"57x57\" href=\"/images/apple-touch-icon-57x57.png\" />\n      <link rel=\"apple-touch-icon-precomposed\" sizes=\"114x114\" href=\"/images/apple-touch-icon-114x114.png\" />\n      <link rel=\"apple-touch-icon-precomposed\" sizes=\"72x72\" href=\"/images/apple-touch-icon-72x72.png\" />\n      <link rel=\"apple-touch-icon-precomposed\" sizes=\"144x144\" href=\"/images/apple-touch-icon-144x144.png\" />\n      <link rel=\"apple-touch-icon-precomposed\" sizes=\"60x60\" href=\"/images/apple-touch-icon-60x60.png\" />\n      <link rel=\"apple-touch-icon-precomposed\" sizes=\"120x120\" href=\"/images/apple-touch-icon-120x120.png\" />\n      <link rel=\"apple-touch-icon-precomposed\" sizes=\"76x76\" href=\"/images/apple-touch-icon-76x76.png\" />\n      <link rel=\"apple-touch-icon-precomposed\" sizes=\"152x152\" href=\"/images/apple-touch-icon-152x152.png\" />\n      <link rel=\"icon\" type=\"image/png\" href=\"/images/favicon-196x196.png\" sizes=\"196x196\" />\n      <link rel=\"icon\" type=\"image/png\" href=\"/images/favicon-96x96.png\" sizes=\"96x96\" />\n      <link rel=\"icon\" type=\"image/png\" href=\"/images/favicon-32x32.png\" sizes=\"32x32\" />\n      <link rel=\"icon\" type=\"image/png\" href=\"/images/favicon-16x16.png\" sizes=\"16x16\" />\n      <link rel=\"icon\" type=\"image/png\" href=\"/images/favicon-128.png\" sizes=\"128x128\" />\n      <meta name=\"application-name\" content=\"korona.kans.io\"/>\n      <meta name=\"msapplication-TileColor\" content=\"#000000\" />\n      <meta name=\"msapplication-TileImage\" content=\"/images/mstile-144x144.png\" />\n      <meta name=\"msapplication-square70x70logo\" content=\"/images/mstile-70x70.png\" />\n      <meta name=\"msapplication-square150x150logo\" content=\"/images/mstile-150x150.png\" />\n      <meta name=\"msapplication-wide310x150logo\" content=\"/images/mstile-310x150.png\" />\n      <meta name=\"msapplication-square310x310logo\" content=\"/images/mstile-310x310.png\" />\n      <meta name=\"apple-mobile-web-app-title\" content=\"korona.kans.io\" />\n      <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n    </Head>\n    <Box p={[2, 4, 5]} width={['100%', '100%', 2/3, 2/3]} textAlign=\"center\">\n      <Image src=\"/images/corona-virus-small.png\" mb={0} title=\"CDC/ Alissa Eckert, MS; Dan Higgins, MAM / Public domain\" alt=\"Kuvituskuva koronaviruksesta\" borderWidth=\"0px\" width=\"90px\" />\n      <Heading as=\"h1\" color=\"rgb(51, 68, 85)\" mb={[3, 3, 5]} mt={[3, 3, 2]} textAlign=\"center\">Coronavirus infection in Algeria</Heading>\n      <Text mb={5} fontFamily=\"Space Mono\" color=\"rgb(51, 68, 85, 0.8)\">The information on this page is based on information gathered from Media. Data is updated every time new information becomes available.</Text>\n    </Box>\n  </Fragment>\n);\n\nexport default Header;","import { ThemeProvider, theme, CSSReset } from '@chakra-ui/core';\nimport { Children } from 'react';\n\nconst customTheme = {\n  ...theme,\n  fonts: {\n    heading: '\"Space Grotesk Regular\", sans-serif',\n    body: '\"Space Grotesk Regular\", sans-serif',\n    mono: 'Space Mono\", Menlo, monospace',\n  },\n}\n\nconst Index: React.FC = props => (\n  <ThemeProvider theme={customTheme}>\n    <CSSReset />\n    <div style={{flex: 1}}>\n      {props.children}\n    </div>\n  </ThemeProvider>\n);\n\nexport default Index;","import { useState, useEffect } from 'react';\nimport Graph from \"react-graph-vis\";\n\nconst NetworkGraph = ({ data }) => {\n  const [isComponentMounted, setIsComponentMounted] = useState(false)\n\n  useEffect(() => setIsComponentMounted(true), [])\n\n  if(!isComponentMounted) {\n    return null\n  }\n  const options = {\n    layout: {\n      hierarchical: false\n    },\n    edges: {\n      color: \"#000000\",\n      width: 2,\n      smooth: true,\n    },\n    height: \"600px\",\n    nodes: {\n      // shape: \"dot\",\n      size: 30,\n      font: {\n        size: 22,\n        face: 'Space Mono',\n        color: \"#fff\"\n      },\n      borderWidth: 2\n    },\n    autoResize: true, \n    layout: {\n      improvedLayout: true,\n      clusterThreshold: 150,\n    }\n  };\n\n  const events = {\n    select: function(event) {\n      var { nodes, edges } = event;\n    }\n  };\n  return (\n    <Graph\n      graph={data}\n      options={options}\n      events={events}\n    />\n  );\n}\n\nexport default NetworkGraph;","import styled from '@emotion/styled';\nimport Layout from './Layout';\nimport {\n  Stat,\n  StatLabel,\n  StatNumber,\n  StatHelpText,\n  StatArrow,\n  StatGroup,\n  Box,\n  Badge\n} from \"@chakra-ui/core\";\n\nimport Block from './Block';\n\ninterface StatBlock {\n  count: number;\n  helpText?: string;\n}\n\nconst StatBlock: React.FC<StatBlock> = ({ count, helpText }) => (\n  <Stat m={0} p={0} textAlign=\"center\" marginTop=\"-20px\">\n    <StatNumber bg=\"white\" pt={0} pb={0} fontSize={70} mb={0} fontFamily=\"Space Mono\" fontWeight=\"normal\">{count}</StatNumber>\n    <StatHelpText mb={3}>&nbsp;{helpText}&nbsp;</StatHelpText>\n  </Stat>\n);\n\nexport default StatBlock;","import React from 'react'\nimport styled from '@emotion/styled';\nimport { useTable } from 'react-table'\n\nconst Styles = styled.div`\n  /* padding: 1rem; */\n  -webkit-overflow-scrolling: touch;\n  table {\n    border-spacing: 0;\n    border-bottom: solid 1px rgba(102,119,136,.15);\n    width: 100%;\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n    th {\n      border-top: solid 1px white;\n      position: sticky;\n      top: -1px;\n      background: white;\n    }\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem 1rem;\n      text-align: left;\n      border-bottom: solid 1px rgba(102,119,136,.15);\n      border-right: 0px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`\n\ninterface TableProps {\n  columns: any,\n  data: any,\n  height?: number;\n}\n\nconst Table:React.FC<TableProps> = ({ columns, data, height }) => {\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({\n    columns,\n    data,\n  })\n\n  // Render the UI for your table\n  return (\n    <Styles style={{height: `${height}px`, overflowY: 'scroll'}}>\n    <table {...getTableProps()}>\n      <thead>\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row, i) => {\n          prepareRow(row)\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map(cell => {\n                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n              })}\n            </tr>\n          )\n        })}\n      </tbody>\n    </table>\n    </Styles>\n  )\n}\n\nexport default Table;\n","import { format } from 'date-fns';\n\nexport const infectionColumns = [\n  {\n    Header: 'Index',\n    accessor: 'index',\n    Cell: ({ cell: { value } }: any) => {\n      return value\n    }\n  },\n  {\n    Header: 'Id',\n    accessor: 'id',\n    Cell: ({ cell }: any) => {\n      return `#0${cell.value}`\n    }\n      \n  },\n  {\n    Header: 'Date',\n    accessor: 'date',\n    minWidth: '20%',\n    Cell: ({ cell: { value } }: any) => format(new Date(value), 'dd.MM.yyyy - HH:mm')\n  },\n  {\n    Header: 'Wilaya',\n    accessor: 'wilaya',\n  },\n  {\n    Header: 'Source',\n    accessor: 'infection_source_country',\n  },\n  {\n    Header: 'Source of infection',\n    accessor: 'infection_source',\n    Cell: ({ cell: { value } }: any) => {\n      if (value === 'unknown') {\n        return 'Not known';\n      }\n      if (value === 'related to earlier') {\n        return 'related to earlier'\n      }\n      return `#0${value}`\n    }\n  },\n]\n","\nimport { useMemo, useState } from 'react';\nimport { NextPage } from 'next';\nimport Head from 'next/head';\nimport fetch from 'isomorphic-unfetch';\nimport { format, utcToZonedTime } from 'date-fns-tz';\nimport { Area, AreaChart, ReferenceLine, ComposedChart, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer, BarChart, Bar, Cell, LabelList, Legend } from 'recharts';\nimport { Flex, Box, Button, ButtonGroup } from '@chakra-ui/core';\n\nimport Layout from '../components/Layout';\nimport StatBlock from '../components/StatBlock';\nimport Block from '../components/Block';\nimport Copyright from '../components/Copyright';\nimport Header from '../components/Header';\nimport NetworkGraph from '../components/NetworkGraph';\nimport Table from '../components/Table';\nimport { infectionColumns } from '../components/TableColumns'\n\nimport { getTimeSeriesData, getPredictionData, getTnfectionsByDistrict, getInfectionsBySourceCountry, getNetworkGraphData, colors, getInfectionsToday } from '../utils/chartDataHelper';\n\nexport interface KoronaData {\n  confirmed: Confirmed[];\n  recovered: Recovered[];\n  deaths: any[];\n}\n\nexport interface Confirmed {\n  id: string;\n  date: Date;\n  healthCareDistrict: string;\n  infectionSource: InfectionSourceEnum | number;\n  infectionSourceCountry: string | null;\n}\n\nexport interface Deaths {\n  id: string;\n  date: Date;\n  healthCareDistrict: string;\n}\n\nexport interface Recovered {\n  id: number;\n  date: Date;\n  healthCareDistrict: string;\n}\n\nexport enum InfectionSourceEnum {\n  RelatedToEarlier = \"related to earlier\",\n  Unknown = \"unknown\",\n}\n\nconst CustomizedAxisTick: React.FC<any> = (props) => {\n  const {\n    x, y, stroke, payload, isDate\n  } = props;\n\n  return (\n    <g transform={`translate(${x},${y})`}>\n      <text x={0} y={0} dy={14} fontSize={12} textAnchor=\"end\" fill=\"#666\" transform=\"rotate(-35)\">{isDate ? format(new Date(payload.value), 'd.M.') : payload.value}</text>\n    </g>\n  );\n}\n\n\n\nconst timeZone = 'Europe/Helsinki'\n\nconst Index: NextPage<KoronaData> = ({ confirmed, deaths, recovered }) => {\n  // Map some data for stats blocks\n  const date = new Date('2018-09-01Z16:01:36.386Z')\n  const latestInfection = format(utcToZonedTime(new Date(confirmed[confirmed.length - 1].date), timeZone), 'dd.MM.yyyy - HH:mm', { timeZone });\n  const latestInfectionDistrict = confirmed[confirmed.length - 1].healthCareDistrict;\n  const latestDeath = deaths.length ? format(utcToZonedTime(new Date(deaths[deaths.length - 1].date), timeZone), 'd.M.yyyy') : null;\n  const latestDeathDistrict = deaths.length ? deaths[deaths.length - 1].healthCareDistrict : null;\n  const latestRecoveredDistrict = recovered.length ? recovered[recovered.length - 1].healthCareDistrict : null;\n  const latestRecovered = recovered.length ? format(utcToZonedTime(new Date(recovered[recovered.length - 1].date), timeZone), 'd.M.yyyy') : null;\n  const infectionsToday = getInfectionsToday(confirmed);\n\n  const [cumulativeChartScale, setCumulativeChartScale] = useState<'linear' | 'log'>('linear')\n  const [forecastChartScale, setForecaseChartScale] = useState<'linear' | 'log'>('linear')\n\n  // Map data to show development of infections\n  const { infectionDevelopmentData, infectionDevelopmentData30Days } = getTimeSeriesData(confirmed, recovered, deaths);\n  const { prediction60Days, today } = getPredictionData(confirmed, deaths, recovered);\n  const maxValues = infectionDevelopmentData30Days[infectionDevelopmentData30Days.length - 1];\n  const dataMaxValue = Math.max(maxValues.deaths, maxValues.infections, maxValues.infections);\n  const { infectionsByDistrict, infectionsByDistrictPercentage, areas } = getTnfectionsByDistrict(confirmed);\n  const { infectionsBySourceCountry } = getInfectionsBySourceCountry(confirmed);\n  const networkGraphData = getNetworkGraphData(confirmed);\n  const reversedConfirmed = confirmed.map((i, index) => ({index: index+1, ...i})).reverse()\n\n  return (\n    <Layout>\n      <Head>\n        <title>Coronavirus infection in Finland – infections: {confirmed.length || 0} - recovered: {recovered.length || 0} - died: {deaths.length || 0}</title>\n        <meta name=\"description\" content={`Suomen koronavirus-tartuntatilanne – tartunnat: ${confirmed.length || 0} - parantuneet: ${recovered.length || 0} - menehtyneet: ${deaths.length || 0}`} />\n        <meta property=\"og:title\" content={`Suomen koronavirus-tartuntatilanne`} />\n        <meta property=\"og:description\" content={`Tartuntoja tällä hetkellä: ${confirmed.length || 0} - parantuneet: ${recovered.length || 0} - menehtyneet: ${deaths.length || 0}`} />\n        <meta property=\"og:site_name\" content=\"Suomen koronavirus-tartuntatilanne\" />\n        <meta property=\"og:locale\" content=\"fi_FI\" />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:image\" content=\"/images/corona-virus.png\" />\n        <meta property=\"og:image:width\" content=\"1920\" />\n        <meta property=\"og:image:height\" content=\"1928\" />\n        <meta property=\"og:url\" content=\"https://korona.kans.io\" />\n      </Head>\n      <Flex alignItems=\"center\" flexDirection=\"column\" flex=\"1\" width={\"100%\"} maxWidth=\"1440px\" margin=\"auto\">\n        <Header />\n        <Flex flexWrap=\"wrap\" flexDirection=\"row\" justifyContent=\"center\" alignItems=\"stretch\" flex=\"1\" width={\"100%\"}>\n          <Box width={['100%', '100%', 1 / 3, 1 / 3]} p={3}>\n            <Block title=\"Infections\" textAlign=\"center\" extraInfo={`New infections today ${infectionsToday}`} footer={`Latest infection ${latestInfection} (${latestInfectionDistrict || 'unknown'})`}>\n              <StatBlock count={confirmed.length} helpText={`New infections today: ${infectionsToday}`} />\n            </Block>\n          </Box>\n          <Box width={['100%', '100%', 1 / 3, 1 / 3]} p={3}>\n            <Block title=\"Died\" footer={latestDeath ? `Latest death ${latestDeath} (${latestDeathDistrict || 'unknown'})` : 'No death'}>\n              <StatBlock count={deaths.length || 0} />\n            </Block>\n          </Box>\n          <Box width={['100%', '100%', 1 / 3, 1 / 3]} p={3}>\n            <Block title=\"Recovered\" footer={latestRecovered ? `Latest recovery ${latestRecovered} (${latestRecoveredDistrict || 'unknown'})` : ' '}>\n              <StatBlock count={recovered.length || 0} />\n            </Block>\n          </Box>\n          \n          <Box width={['100%']} p={3}>\n            <Block title=\"Cumulative evolution (30 days)\" footer=\"Cumulative evolution of infections, heals and deaths in the last 30 days\">\n            <ButtonGroup spacing={0} alignSelf=\"center\" display=\"flex\" justifyContent=\"center\" marginTop=\"-15px\">\n              <Button size=\"xs\" fontFamily=\"Space Grotesk Regular\" px={3} letterSpacing=\"1px\" borderRadius=\"4px 0px 0px 4px\" borderWidth=\"0px\" isActive={cumulativeChartScale === 'linear'} onClick={() => setCumulativeChartScale('linear')}>\n                Linear\n              </Button>\n              <Button size=\"xs\" fontFamily=\"Space Grotesk Regular\" px={3} letterSpacing=\"1px\" borderRadius=\"0px 4px 4px 0px\" borderWidth=\"0px\" isActive={cumulativeChartScale === 'log'}  onClick={() => setCumulativeChartScale('log')}>\n                Logarithmic\n              </Button>\n            </ButtonGroup>\n              <ResponsiveContainer width={'100%'} height={380}>\n                <ComposedChart\n                  data={infectionDevelopmentData30Days}\n                  margin={{ top: 20, right: 30, left: 0, bottom: 30 }}\n                >\n                  <defs>\n                    <linearGradient id=\"colorInfection\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"5%\" stopColor={colors[8]} stopOpacity={0.6} />\n                      <stop offset=\"95%\" stopColor={colors[8]} stopOpacity={0} />\n                    </linearGradient>\n                    <linearGradient id=\"colorRecovered\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"5%\" stopColor={colors[7]} stopOpacity={0.6} />\n                      <stop offset=\"95%\" stopColor={colors[7]} stopOpacity={0} />\n                    </linearGradient>\n                    <linearGradient id=\"colorDeaths\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"5%\" stopColor={colors[0]} stopOpacity={0.6} />\n                      <stop offset=\"95%\" stopColor={colors[0]} stopOpacity={0} />\n                    </linearGradient>\n                  </defs>\n                  <XAxis tickFormatter={d => format(new Date(d), 'd.M.')} tick={<CustomizedAxisTick isDate />} dataKey=\"date\" domain={['dataMin', 'dataMax']} type=\"number\" scale=\"time\" />\n                  <YAxis scale={cumulativeChartScale} dataKey=\"infections\" domain={['dataMin', dataMaxValue + 10]} unit=\" person\" tick={{ fontSize: 12 }} name=\"Tartunnat\" />\n                  <CartesianGrid opacity={0.2} />\n                  <Tooltip labelFormatter={v => format(new Date(v), 'dd.MM.yyyy')} />\n                  <Bar fill={colors[1]} opacity={0.4} dataKey=\"infectionsDaily\" name=\"Today's infections\" unit=\" person\" />\n                  <Area type=\"monotone\" unit=\" person\" name=\"Total infections\" dataKey=\"infections\" stroke={colors[8]} fillOpacity={1} fill=\"url(#colorInfection)\" />\n                  <Area type=\"monotone\" unit=\" person\" name=\"Total recovered\" dataKey=\"recovered\" stroke={colors[7]} fillOpacity={1} fill=\"url(#colorRecovered)\" />\n                  <Area type=\"monotone\" unit=\" person\" name=\"Total deaths\" dataKey=\"deaths\" stroke={colors[0]} fillOpacity={1} fill=\"url(#colorDeaths)\" />\n                  <Legend wrapperStyle={{bottom: '10px'}} />\n                </ComposedChart>\n              </ResponsiveContainer>\n            </Block>\n          </Box>\n          {/*\n          <Box width={['100%']} p={3}>\n            <Block title=\"Tartuntojen kumulatiivinen ennustemalli\" footer={`Tartuntojen kehityksen ennustemalli 60 päivää. Laskee ennustetun eksponentiaalisen kasvun käyttämällä aiemmin luotuja tietoja.  Käytetty <a style=\"color: #319795;\" href=\"https://github.com/mljs/regression-exponential\" target=\"_blank\">exponential-regression</a> kirjastoa.`}>\n              <ButtonGroup spacing={0} alignSelf=\"center\" display=\"flex\" justifyContent=\"center\" marginTop=\"-15px\">\n                <Button size=\"xs\" fontFamily=\"Space Grotesk Regular\" px={3} letterSpacing=\"1px\" borderRadius=\"4px 0px 0px 4px\" borderWidth=\"0px\" isActive={forecastChartScale === 'linear'} onClick={() => setForecaseChartScale('linear')}>\n                  Lineaarinen\n                </Button>\n                <Button size=\"xs\" fontFamily=\"Space Grotesk Regular\" px={3} letterSpacing=\"1px\" borderRadius=\"0px 4px 4px 0px\" borderWidth=\"0px\" isActive={forecastChartScale === 'log'}  onClick={() => setForecaseChartScale('log')}>\n                  Logaritminen\n                </Button>\n              </ButtonGroup>\n              <ResponsiveContainer width={'100%'} height={350}>\n                <AreaChart\n                    data={prediction60Days}\n                    margin={{ top: 20, right: 30, left: 0, bottom: 20 }}\n                >\n                  <defs>\n                    <linearGradient id=\"colorInfection\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"5%\" stopColor={colors[8]} stopOpacity={0.6} />\n                      <stop offset=\"95%\" stopColor={colors[8]} stopOpacity={0} />\n                    </linearGradient>\n                  </defs>\n                  <XAxis tickFormatter={d => format(new Date(d), 'd.M.')} tick={<CustomizedAxisTick isDate />} dataKey=\"date\" domain={['dataMin', 'dataMax']} type=\"number\" scale=\"time\" />\n                  <YAxis scale={forecastChartScale} dataKey=\"infections\" domain={['auto', 'auto']} unit=\" person\" tick={{ fontSize: 12 }} name=\"Tartunnat\" />\n\n                  <CartesianGrid opacity={0.2} />\n                  <ReferenceLine\n                    x={today}\n                    stroke=\"rgba(0,0,0,.5)\"\n                    // @ts-ignore\n                    label={{ position: 'top', value: 'Nyt', fill: 'rgba(0,0,0,0.5)', fontSize: 12 }}\n                    strokeDasharray=\"3 3\" />\n                  <Tooltip labelFormatter={v => format(new Date(v), 'dd.MM.yyyy')} />\n                  <Area type=\"monotone\" name=\"Ennuste\" unit=\" person\" dataKey=\"infections\" stroke={colors[8]} fillOpacity={1} fill=\"url(#colorInfection)\" />\n                </AreaChart>\n              </ResponsiveContainer>\n            </Block>\n          </Box>\n          */}\n          <Box width={['100%', '100%', '100%', '100%', 1 / 2]} p={3}>\n            <Block title=\"Infections by hospital district\" footer=\"Infections by hospital district\">\n              <ResponsiveContainer width={'100%'} height={350}>\n                <BarChart\n                  data={infectionsByDistrict}\n                  margin={{\n                    top: 20, right: 30, left: 0, bottom: 85,\n                  }}\n                >\n                  <XAxis interval={0} dataKey=\"name\" tick={<CustomizedAxisTick />} />\n                  <YAxis yAxisId=\"left\" unit=\" person\" dataKey=\"infections\" tick={{ fontSize: 12 }} />\n                  <Tooltip />\n                  <Bar dataKey=\"infections\" name=\"Tartunnat\" unit=\" person\" yAxisId=\"left\">\n                    {\n                      areas.map((area, index) => (\n                        <Cell key={area} fill={colors[index % colors.length]} />\n                      ))\n                    }\n                    <LabelList dataKey=\"infections\" position=\"top\" formatter={(e) => e} />\n                  </Bar>\n                </BarChart>\n              </ResponsiveContainer>\n            </Block>\n          </Box>\n          <Box width={['100%', '100%', '100%', '100%', 1 / 2]} p={3}>\n            <Block title=\"Infections by hospital district / Size of the hospital district\" footer=\"Infections by hospital district / Size of the hospital district\">\n              <ResponsiveContainer width={'100%'} height={350}>\n                <BarChart\n                  data={infectionsByDistrictPercentage}\n                  margin={{\n                    top: 20, right: 30, left: 0, bottom: 85,\n                  }}\n                >\n                  <XAxis interval={0} dataKey=\"name\" tick={<CustomizedAxisTick />} />\n                  <YAxis unit=\" %\" dataKey=\"perDistrict\" tick={{ fontSize: 12 }} />\n                  <Tooltip />\n                  <Bar dataKey=\"perDistrict\" name=\"%-osuus väestöstä\" unit=\" %\">\n                    {\n                      areas.map((area, index) => (\n                        <Cell key={area} fill={colors[index % colors.length]} />\n                      ))\n                    }\n                    <LabelList dataKey=\"perDistict\" position=\"top\" formatter={(e) => e} />\n                  </Bar>\n                </BarChart>\n              </ResponsiveContainer>\n            </Block>\n          </Box>\n          <Box width={['100%', '100%', '100%', '100%', 1/2]} p={3}>\n            <Block title=\"Countries of origin of infections\" footer=\"Number of infections by country of origin\">\n              <ResponsiveContainer width={'100%'} height={350}>\n                <BarChart\n                  data={infectionsBySourceCountry}\n                  margin={{\n                    top: 20, right: 30, left: 0, bottom: 85,\n                  }}\n                >\n                  <XAxis interval={0} dataKey=\"name\" tick={<CustomizedAxisTick />} />\n                  <YAxis unit=\" person\" dataKey=\"infections\" tick={{ fontSize: 12 }} />\n                  <Tooltip />\n                  <Bar dataKey=\"infections\" name=\"Tartunnat\" unit=\" person\">\n                    {\n                      areas.map((area, index) => (\n                        <Cell key={area} fill={colors[index % colors.length]} />\n                      ))\n                    }\n                    <LabelList dataKey=\"infections\" position=\"top\" />\n                  </Bar>\n                </BarChart>\n              </ResponsiveContainer>\n            </Block>\n          </Box>\n          <Box width={['100%', '100%', '100%', '100%', 1/2]} p={3}>\n            <Block title=\"Log of infections\" footer=\"All infections in Algeria are listed, most recent first. Some id may be missing in the middle\">\n              <Table height={350} data={reversedConfirmed} columns={useMemo(() => infectionColumns, [])} />\n            </Block>\n          </Box>\n          <Box width={['100%']} p={3}>\n            <Block title=\"Infections' Networks\" footer=\"The figure shows the infections as a network. The number is the serial number of the infection. If the direct vector is not known, the link will be linked to the country of origin. Infections for which the direct cause or the country of origin is not known are excluded. Infections marked in Algeria are most likely to be linked to other infection networks. The color of the cell indicates the country where the infection is likely to have occurred.\">\n              <NetworkGraph data={networkGraphData} />\n            </Block>\n          </Box>\n        </Flex>\n\n        <Copyright />\n      </Flex>\n    </Layout>\n  );\n}\n\nIndex.getInitialProps = async function () {\n  const res = await fetch('https://raw.githubusercontent.com/stodi1/corona_virus_open_data/master/data.json');\n  const data = await res.json();\n  const confirmed = data.confirmed.map((i:Confirmed) => ({...i, infectionSourceCountry: i.infectionSourceCountry === \"\" ? null : i.infectionSourceCountry}))\n  return {...data, confirmed};\n};\n\nexport default Index;","import { format, sub, eachDayOfInterval, isSameDay, isToday } from 'date-fns';\nimport groupBy from 'lodash.groupby'\nimport sortBy from 'lodash.sortby'\nimport ExponentialRegression from 'ml-regression-exponential'\nimport { Confirmed, Recovered, Deaths } from '../pages';\n\n// Map data to show development of infections\nexport const colors = [\n  '#003f5c',\n  '#2fab8e',\n  '#665191',\n  '#a05195',\n  '#d45087',\n  '#f95d6a',\n  '#ff7c43',\n  '#ffa600',\n  '#ee2320',\n];\n\nexport const healtCareDistricts = [\n  { name: 'HUS', people: 1651715 },\n  { name: 'Etelä-Karjala', people: 129865 },\n  { name: 'Kymenlaakso', people: 168691 },\n  { name: 'Päijät-Häme', people: 211957 },\n  { name: 'Pohjois-Savo', people: 246653 },\n  { name: 'Etelä-Savo', people: 101518 },\n  { name: 'Itä-Savo', people: 42221 },\n  { name: 'Keski-Suomi', people: 252902 },\n  { name: 'Pohjois-Karjala', people: 166441 },\n  { name: 'Pohjois-Pohjanmaa', people: 409043 },\n  { name: 'Kainuu', people: 73959 },\n  { name: 'Keski-Pohjanmaa', people: 78124 },\n  { name: 'Lappi', people: 117447 },\n  { name: 'Länsi-Pohja', people: 61776 },\n  { name: 'Pirkanmaa', people: 532261 },\n  { name: 'Etelä-Pohjanmaa', people: 195583 },\n  { name: 'Kanta-Häme', people: 172720 },\n  { name: 'Varsinais-Suomi', people: 480626 },\n  { name: 'Satakunta', people: 220398 },\n  { name: 'Vaasa', people: 169741 }\n];\n\nconst peopleTotal = healtCareDistricts.reduce((acc, curr) => curr.people + acc, 0);\n\ninterface InfectionDevelopmentDataItem {\n  date: number;\n  infections: number;\n  deaths: number;\n  recovered: number;\n  infectionsDaily: number;\n};\n\ninterface InfectionDevelopment60DaysDataItem {\n  date: number;\n  infections: number | null;\n};\n\ninterface InfectionDevelopmentDataObj {\n  prediction60Days: InfectionDevelopment60DaysDataItem[];\n  today: number;\n}\n\nexport const getTimeSeriesData = (confirmed: Confirmed[], recovered: Recovered[], deaths: Deaths[]): {\n  infectionDevelopmentData: InfectionDevelopmentDataItem[]\n  infectionDevelopmentData30Days: InfectionDevelopmentDataItem[]\n} => {\n\n  const sortedData = sortBy(confirmed, 'date').map(item => ({ ...item, dateString: format(new Date(item.date), 'yyyy-MM-dd') }));\n  const sortedDataRecoverd = sortBy(recovered, 'date').map(item => ({ ...item, dateString: format(new Date(item.date), 'yyyy-MM-dd') }));\n  const sortedDataDeaths = sortBy(deaths, 'date').map(item => ({ ...item, dateString: format(new Date(item.date), 'yyyy-MM-dd') }));\n\n\n  const daysIntervalSinceFirstInfection = eachDayOfInterval({ start: new Date(sortedData[0].date), end: new Date(sortedData[sortedData.length - 1].date) });\n\n  const infectionDevelopmentData: InfectionDevelopmentDataItem[] = []\n  daysIntervalSinceFirstInfection.reduce((acc, curr) => {\n    const items = sortedData.filter(item => isSameDay(new Date(item.date), curr));\n    const itemsRecovered = sortedDataRecoverd.filter(item => isSameDay(new Date(item.date), curr));\n    const itemsDeaths = sortedDataDeaths.filter(item => isSameDay(new Date(item.date), curr));\n    acc.deaths = acc.deaths + itemsDeaths.length;\n    acc.infections = acc.infections + items.length;\n    acc.recovered = acc.recovered + itemsRecovered.length;\n    \n    infectionDevelopmentData.push({date: curr.getTime(), infectionsDaily: items.length,...acc})\n\n    return acc\n  }, {infections: 0, deaths: 0, recovered: 0})\n\n  const thirtyDaysAgo = sub(new Date(), { days: 30 });\n  const infectionDevelopmentData30Days = infectionDevelopmentData.filter(item => item.date > thirtyDaysAgo.getTime());\n\n\n  return {\n    infectionDevelopmentData,\n    infectionDevelopmentData30Days,\n  };\n\n}\n\nexport const getPredictionData = (confirmed: Confirmed[], deaths: Deaths[], recovered: Recovered[]): InfectionDevelopmentDataObj => {\n\n  const currentData30Days = getTimeSeriesData(confirmed, recovered, deaths).infectionDevelopmentData30Days\n\n  const indexes = currentData30Days.map((d,i) => i + 1);\n  const infections = currentData30Days.map(d => d.infections);\n\n  const x = indexes\n  const y = infections\n\n  const regression = new ExponentialRegression(x, y);\n\n  const prediction60Days = Array.from(new Array(60)).map((x,i) => {\n    const date = new Date(currentData30Days[0].date)\n\n    date.setDate(date.getDate() + i)\n    return {date: date.getTime(), infections: Math.round(regression.predict(i)) === 0 ? null : Math.round(regression.predict(i))}\n  })\n\n  return { prediction60Days, today: prediction60Days[29].date }\n\n}\n\nexport const getTnfectionsByDistrict = (confirmed: Confirmed[]) => {\n  const groupedData = groupBy(confirmed, 'healthCareDistrict');\n\n  const infectionsByDistrict = Object.entries(groupedData).map((value) => ({\n    name: value[0],\n    infections: value[1].length,\n    // @ts-ignore\n    people: Math.round(healtCareDistricts.find(i => i.name === value[0])?.people / peopleTotal * 100)\n  }))\n\n  const infectionsByDistrictPercentage = Object.entries(groupedData).map((value) => ({\n    name: value[0],\n    infections: Math.round(value[1].length / confirmed.length * 100),\n    // @ts-ignore\n    people: Math.round(healtCareDistricts.find(i => i.name === value[0])?.people / peopleTotal * 100),\n    // @ts-ignore\n    perDistrict: Math.round(value[1].length / healtCareDistricts.find(i => i.name === value[0])?.people * 100 * 10000) / 10000,\n  }))\n\n  const areas = Object.entries(groupedData).map((value) => (value[0]));\n  return {\n    infectionsByDistrict,\n    infectionsByDistrictPercentage,\n    areas\n  };\n}\n\nexport const getInfectionsBySourceCountry = (confirmed: Confirmed[]) => {\n  const groupedData = groupBy(confirmed, 'infectionSourceCountry');\n\n  const infectionsBySourceCountry = Object.entries(groupedData).map((value) => ({\n    name: value[0] === 'null' ? 'Ei tiedossa' : value[0],\n    infections: value[1].length\n  }))\n\n  const areas = Object.entries(groupedData).map((value) => (value[0]));\n  return {\n    infectionsBySourceCountry,\n    areas\n  };\n}\n\nconst getGroup = (infection: Confirmed, confirmed: Confirmed[]): string | null => {\n  if (typeof infection.infectionSource === 'number') {\n    const item = confirmed.find(i => Number(i.id) === infection.infectionSource);\n    if (item) {\n      if (typeof item.infectionSource === 'number') {\n        return getGroup(item, confirmed);\n      }\n      if (item.infectionSourceCountry) {\n        return item.infectionSourceCountry;\n      }\n      return null;\n    }\n  }\n  return infection.infectionSourceCountry;\n}\n\nexport const getInfectionsToday = (confirmed: Confirmed[]) => {\n  const infectionsToday = confirmed.filter(infection => isToday(new Date(infection.date)));\n  return infectionsToday.length || 0;\n}\n\nexport const getNetworkGraphData = (confirmed: Confirmed[]) => {\n\n  const infectionSources = Array.from(new Set(confirmed.filter(i => typeof i.infectionSource === 'number').map(inf => inf.infectionSource)));\n\n  const uniqueCountries = Array.from(new Set(confirmed.filter(i => !!i.infectionSourceCountry).map(inff => inff.infectionSourceCountry)));\n\n  const allNodes = confirmed.map((infection, index) => ({\n    index: index + 1,\n    ...infection,\n    id: Number(infection.id),\n    label: `#0${index + 1}`,\n    // group: getGroup(infection, confirmed),\n    color: `${colors[uniqueCountries.indexOf(infection.infectionSourceCountry)]}`,\n  }));\n  const nodes = allNodes.filter(i => infectionSources.includes(i.id) || typeof i.infectionSource === 'number');\n  // @ts-ignore\n  const edges = allNodes.map(i => ({\n    from: typeof i.infectionSource === 'number' ? i.infectionSource : i.infectionSourceCountry,\n    to: i.id,\n  }));\n  const filteredNodes = allNodes.filter(i => !!i.infectionSourceCountry || typeof i.infectionSource === 'number');\n  // @ts-ignore\n  uniqueCountries.map((country, index) => filteredNodes.push({ id: country, label: country, color: `${colors[uniqueCountries.indexOf(country)]}` }))\n  return {\n    nodes: filteredNodes,\n    edges\n  };\n}\n","module.exports = require(\"@chakra-ui/core\");","module.exports = require(\"@emotion/styled\");","module.exports = require(\"date-fns\");","module.exports = require(\"date-fns-tz\");","module.exports = require(\"isomorphic-unfetch\");","module.exports = require(\"lodash.groupby\");","module.exports = require(\"lodash.sortby\");","module.exports = require(\"ml-regression-exponential\");","module.exports = require(\"next/head\");","module.exports = require(\"react\");","module.exports = require(\"react-graph-vis\");","module.exports = require(\"react-table\");","module.exports = require(\"recharts\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AAIA;;;;;AAAA;AACA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AACA;AAOA;;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAA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AA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/SA;AACA;AACA;AACA;AAGA;AACA;AAYA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAQA;AAKA;AAOA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAOA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AASA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;;;;;;;;;;;;;;;;;;;;;;;ACpNA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}