{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Volumes/Disk/works/react/corona_live_info/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useMemo, useState } from 'react';\nimport Head from 'next/head';\nimport fetch from 'isomorphic-unfetch';\nimport { format, utcToZonedTime } from 'date-fns-tz';\nimport { Area, ComposedChart, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer, BarChart, Bar, Cell, LabelList, Legend } from 'recharts';\nimport { Flex, Box, Button, ButtonGroup } from '@chakra-ui/core';\nimport Layout from '../components/Layout';\nimport StatBlock from '../components/StatBlock';\nimport Block from '../components/Block';\nimport Copyright from '../components/Copyright';\nimport Header from '../components/Header';\nimport NetworkGraph from '../components/NetworkGraph';\nimport Table from '../components/Table';\nimport { infectionColumns } from '../components/TableColumns';\nimport { getTimeSeriesData, getPredictionData, getTnfectionsByDistrict, getInfectionsBySourceCountry, getNetworkGraphData, colors, getInfectionsToday } from '../utils/chartDataHelper';\nexport var InfectionSourceEnum;\n\n(function (InfectionSourceEnum) {\n  InfectionSourceEnum[\"RelatedToEarlier\"] = \"related to earlier\";\n  InfectionSourceEnum[\"Unknown\"] = \"unknown\";\n})(InfectionSourceEnum || (InfectionSourceEnum = {}));\n\nvar CustomizedAxisTick = function CustomizedAxisTick(props) {\n  var x = props.x,\n      y = props.y,\n      stroke = props.stroke,\n      payload = props.payload,\n      isDate = props.isDate;\n  return __jsx(\"g\", {\n    transform: \"translate(\".concat(x, \",\").concat(y, \")\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, __jsx(\"text\", {\n    x: 0,\n    y: 0,\n    dy: 14,\n    fontSize: 12,\n    textAnchor: \"end\",\n    fill: \"#666\",\n    transform: \"rotate(-35)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, isDate ? format(new Date(payload.value), 'd.M.') : payload.value));\n};\n\nvar timeZone = 'Europe/Helsinki';\n\nvar Index = function Index(_ref) {\n  var confirmed = _ref.confirmed,\n      deaths = _ref.deaths,\n      recovered = _ref.recovered;\n  // Map some data for stats blocks\n  var date = new Date('2018-09-01Z16:01:36.386Z');\n  var latestInfection = format(utcToZonedTime(new Date(confirmed[confirmed.length - 1].date), timeZone), 'dd.MM.yyyy - HH:mm', {\n    timeZone: timeZone\n  });\n  var latestInfectionDistrict = confirmed[confirmed.length - 1].healthCareDistrict;\n  var latestDeath = deaths.length ? format(utcToZonedTime(new Date(deaths[deaths.length - 1].date), timeZone), 'd.M.yyyy') : null;\n  var latestDeathDistrict = deaths.length ? deaths[deaths.length - 1].healthCareDistrict : null;\n  var latestRecoveredDistrict = recovered.length ? recovered[recovered.length - 1].healthCareDistrict : null;\n  var latestRecovered = recovered.length ? format(utcToZonedTime(new Date(recovered[recovered.length - 1].date), timeZone), 'd.M.yyyy') : null;\n  var infectionsToday = getInfectionsToday(confirmed);\n\n  var _useState = useState('linear'),\n      cumulativeChartScale = _useState[0],\n      setCumulativeChartScale = _useState[1];\n\n  var _useState2 = useState('linear'),\n      forecastChartScale = _useState2[0],\n      setForecaseChartScale = _useState2[1]; // Map data to show development of infections\n\n\n  var _getTimeSeriesData = getTimeSeriesData(confirmed, recovered, deaths),\n      infectionDevelopmentData = _getTimeSeriesData.infectionDevelopmentData,\n      infectionDevelopmentData30Days = _getTimeSeriesData.infectionDevelopmentData30Days;\n\n  var _getPredictionData = getPredictionData(confirmed, deaths, recovered),\n      prediction60Days = _getPredictionData.prediction60Days,\n      today = _getPredictionData.today;\n\n  var maxValues = infectionDevelopmentData30Days[infectionDevelopmentData30Days.length - 1];\n  var dataMaxValue = Math.max(maxValues.deaths, maxValues.infections, maxValues.infections);\n\n  var _getTnfectionsByDistr = getTnfectionsByDistrict(confirmed),\n      infectionsByDistrict = _getTnfectionsByDistr.infectionsByDistrict,\n      infectionsByDistrictPercentage = _getTnfectionsByDistr.infectionsByDistrictPercentage,\n      areas = _getTnfectionsByDistr.areas;\n\n  var _getInfectionsBySourc = getInfectionsBySourceCountry(confirmed),\n      infectionsBySourceCountry = _getInfectionsBySourc.infectionsBySourceCountry;\n\n  var networkGraphData = getNetworkGraphData(confirmed);\n  var reversedConfirmed = confirmed.map(function (i, index) {\n    return _objectSpread({\n      index: index + 1\n    }, i);\n  }).reverse();\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, __jsx(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Coronavirus infection in Finland \\u2013 infections: \", confirmed.length || 0, \" - recovered: \", recovered.length || 0, \" - died: \", deaths.length || 0), __jsx(\"meta\", {\n    name: \"description\",\n    content: \"Suomen koronavirus-tartuntatilanne \\u2013 tartunnat: \".concat(confirmed.length || 0, \" - parantuneet: \").concat(recovered.length || 0, \" - menehtyneet: \").concat(deaths.length || 0),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: \"Suomen koronavirus-tartuntatilanne\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), __jsx(\"meta\", {\n    property: \"og:description\",\n    content: \"Tartuntoja t\\xE4ll\\xE4 hetkell\\xE4: \".concat(confirmed.length || 0, \" - parantuneet: \").concat(recovered.length || 0, \" - menehtyneet: \").concat(deaths.length || 0),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), __jsx(\"meta\", {\n    property: \"og:site_name\",\n    content: \"Suomen koronavirus-tartuntatilanne\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), __jsx(\"meta\", {\n    property: \"og:locale\",\n    content: \"fi_FI\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), __jsx(\"meta\", {\n    property: \"og:type\",\n    content: \"website\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }), __jsx(\"meta\", {\n    property: \"og:image\",\n    content: \"/images/corona-virus.png\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), __jsx(\"meta\", {\n    property: \"og:image:width\",\n    content: \"1920\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), __jsx(\"meta\", {\n    property: \"og:image:height\",\n    content: \"1928\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }), __jsx(\"meta\", {\n    property: \"og:url\",\n    content: \"https://korona.kans.io\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  })), __jsx(Flex, {\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    flex: \"1\",\n    width: \"100%\",\n    maxWidth: \"1440px\",\n    margin: \"auto\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), __jsx(Flex, {\n    flexWrap: \"wrap\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"stretch\",\n    flex: \"1\",\n    width: \"100%\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, __jsx(Box, {\n    width: ['100%', '100%', 1 / 3, 1 / 3],\n    p: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, __jsx(Block, {\n    title: \"Infections\",\n    textAlign: \"center\",\n    extraInfo: \"New infections today \".concat(infectionsToday),\n    footer: \"Latest infection \".concat(latestInfection, \" (\").concat(latestInfectionDistrict || 'unknown', \")\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, __jsx(StatBlock, {\n    count: confirmed.length,\n    helpText: \"New infections today: \".concat(infectionsToday),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }))), __jsx(Box, {\n    width: ['100%', '100%', 1 / 3, 1 / 3],\n    p: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, __jsx(Block, {\n    title: \"Died\",\n    footer: latestDeath ? \"Latest death \".concat(latestDeath, \" (\").concat(latestDeathDistrict || 'unknown', \")\") : 'No death',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, __jsx(StatBlock, {\n    count: deaths.length || 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }))), __jsx(Box, {\n    width: ['100%', '100%', 1 / 3, 1 / 3],\n    p: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, __jsx(Block, {\n    title: \"Recovered\",\n    footer: latestRecovered ? \"Latest recovery \".concat(latestRecovered, \" (\").concat(latestRecoveredDistrict || 'unknown', \")\") : ' ',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, __jsx(StatBlock, {\n    count: recovered.length || 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }))), __jsx(Box, {\n    width: ['100%'],\n    p: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, __jsx(Block, {\n    title: \"Cumulative evolution (30 days)\",\n    footer: \"Cumulative evolution of infections, heals and deaths in the last 30 days\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, __jsx(ButtonGroup, {\n    spacing: 0,\n    alignSelf: \"center\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    marginTop: \"-15px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, __jsx(Button, {\n    size: \"xs\",\n    fontFamily: \"Space Grotesk Regular\",\n    px: 3,\n    letterSpacing: \"1px\",\n    borderRadius: \"4px 0px 0px 4px\",\n    borderWidth: \"0px\",\n    isActive: cumulativeChartScale === 'linear',\n    onClick: function onClick() {\n      return setCumulativeChartScale('linear');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, \"Linear\"), __jsx(Button, {\n    size: \"xs\",\n    fontFamily: \"Space Grotesk Regular\",\n    px: 3,\n    letterSpacing: \"1px\",\n    borderRadius: \"0px 4px 4px 0px\",\n    borderWidth: \"0px\",\n    isActive: cumulativeChartScale === 'log',\n    onClick: function onClick() {\n      return setCumulativeChartScale('log');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"Logarithmic\")), __jsx(ResponsiveContainer, {\n    width: '100%',\n    height: 380,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, __jsx(ComposedChart, {\n    data: infectionDevelopmentData30Days,\n    margin: {\n      top: 20,\n      right: 30,\n      left: 0,\n      bottom: 30\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, __jsx(\"defs\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, __jsx(\"linearGradient\", {\n    id: \"colorInfection\",\n    x1: \"0\",\n    y1: \"0\",\n    x2: \"0\",\n    y2: \"1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, __jsx(\"stop\", {\n    offset: \"5%\",\n    stopColor: colors[8],\n    stopOpacity: 0.6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }), __jsx(\"stop\", {\n    offset: \"95%\",\n    stopColor: colors[8],\n    stopOpacity: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  })), __jsx(\"linearGradient\", {\n    id: \"colorRecovered\",\n    x1: \"0\",\n    y1: \"0\",\n    x2: \"0\",\n    y2: \"1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, __jsx(\"stop\", {\n    offset: \"5%\",\n    stopColor: colors[7],\n    stopOpacity: 0.6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }), __jsx(\"stop\", {\n    offset: \"95%\",\n    stopColor: colors[7],\n    stopOpacity: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  })), __jsx(\"linearGradient\", {\n    id: \"colorDeaths\",\n    x1: \"0\",\n    y1: \"0\",\n    x2: \"0\",\n    y2: \"1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, __jsx(\"stop\", {\n    offset: \"5%\",\n    stopColor: colors[0],\n    stopOpacity: 0.6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }), __jsx(\"stop\", {\n    offset: \"95%\",\n    stopColor: colors[0],\n    stopOpacity: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }))), __jsx(XAxis, {\n    tickFormatter: function tickFormatter(d) {\n      return format(new Date(d), 'd.M.');\n    },\n    tick: __jsx(CustomizedAxisTick, {\n      isDate: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }),\n    dataKey: \"date\",\n    domain: ['dataMin', 'dataMax'],\n    type: \"number\",\n    scale: \"time\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }), __jsx(YAxis, {\n    scale: cumulativeChartScale,\n    dataKey: \"infections\",\n    domain: ['dataMin', dataMaxValue + 10],\n    unit: \" kpl\",\n    tick: {\n      fontSize: 12\n    },\n    name: \"Tartunnat\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }), __jsx(CartesianGrid, {\n    opacity: 0.2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }), __jsx(Tooltip, {\n    labelFormatter: function labelFormatter(v) {\n      return format(new Date(v), 'dd.MM.yyyy');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }), __jsx(Bar, {\n    fill: colors[1],\n    opacity: 0.4,\n    dataKey: \"infectionsDaily\",\n    name: \"Today's infections\",\n    unit: \" kpl\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }), __jsx(Area, {\n    type: \"monotone\",\n    unit: \" kpl\",\n    name: \"Total infections\",\n    dataKey: \"infections\",\n    stroke: colors[8],\n    fillOpacity: 1,\n    fill: \"url(#colorInfection)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }), __jsx(Area, {\n    type: \"monotone\",\n    unit: \" kpl\",\n    name: \"Total recovered\",\n    dataKey: \"recovered\",\n    stroke: colors[7],\n    fillOpacity: 1,\n    fill: \"url(#colorRecovered)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }), __jsx(Area, {\n    type: \"monotone\",\n    unit: \" kpl\",\n    name: \"Total deaths\",\n    dataKey: \"deaths\",\n    stroke: colors[0],\n    fillOpacity: 1,\n    fill: \"url(#colorDeaths)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }), __jsx(Legend, {\n    wrapperStyle: {\n      bottom: '10px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }))))), __jsx(Box, {\n    width: ['100%', '100%', '100%', '100%', 1 / 2],\n    p: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, __jsx(Block, {\n    title: \"Infections by hospital district\",\n    footer: \"Infections by hospital district\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, __jsx(ResponsiveContainer, {\n    width: '100%',\n    height: 350,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, __jsx(BarChart, {\n    data: infectionsByDistrict,\n    margin: {\n      top: 20,\n      right: 30,\n      left: 0,\n      bottom: 85\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, __jsx(XAxis, {\n    interval: 0,\n    dataKey: \"name\",\n    tick: __jsx(CustomizedAxisTick, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }), __jsx(YAxis, {\n    yAxisId: \"left\",\n    unit: \" kpl\",\n    dataKey: \"infections\",\n    tick: {\n      fontSize: 12\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }), __jsx(Tooltip, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }), __jsx(Bar, {\n    dataKey: \"infections\",\n    name: \"Tartunnat\",\n    unit: \" kpl\",\n    yAxisId: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }, areas.map(function (area, index) {\n    return __jsx(Cell, {\n      key: area,\n      fill: colors[index % colors.length],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    });\n  }), __jsx(LabelList, {\n    dataKey: \"infections\",\n    position: \"top\",\n    formatter: function formatter(e) {\n      return e;\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  })))))), __jsx(Box, {\n    width: ['100%', '100%', '100%', '100%', 1 / 2],\n    p: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  }, __jsx(Block, {\n    title: \"Infections by hospital district / Size of the hospital district\",\n    footer: \"Infections by hospital district / Size of the hospital district\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }, __jsx(ResponsiveContainer, {\n    width: '100%',\n    height: 350,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  }, __jsx(BarChart, {\n    data: infectionsByDistrictPercentage,\n    margin: {\n      top: 20,\n      right: 30,\n      left: 0,\n      bottom: 85\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  }, __jsx(XAxis, {\n    interval: 0,\n    dataKey: \"name\",\n    tick: __jsx(CustomizedAxisTick, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240\n    },\n    __self: this\n  }), __jsx(YAxis, {\n    unit: \" %\",\n    dataKey: \"perDistrict\",\n    tick: {\n      fontSize: 12\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }), __jsx(Tooltip, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }), __jsx(Bar, {\n    dataKey: \"perDistrict\",\n    name: \"%-osuus v\\xE4est\\xF6st\\xE4\",\n    unit: \" %\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243\n    },\n    __self: this\n  }, areas.map(function (area, index) {\n    return __jsx(Cell, {\n      key: area,\n      fill: colors[index % colors.length],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    });\n  }), __jsx(LabelList, {\n    dataKey: \"perDistict\",\n    position: \"top\",\n    formatter: function formatter(e) {\n      return e;\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  })))))), __jsx(Box, {\n    width: ['100%', '100%', '100%', '100%', 1 / 2],\n    p: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255\n    },\n    __self: this\n  }, __jsx(Block, {\n    title: \"Countries of origin of infections\",\n    footer: \"Number of infections by country of origin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256\n    },\n    __self: this\n  }, __jsx(ResponsiveContainer, {\n    width: '100%',\n    height: 350,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  }, __jsx(BarChart, {\n    data: infectionsBySourceCountry,\n    margin: {\n      top: 20,\n      right: 30,\n      left: 0,\n      bottom: 85\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258\n    },\n    __self: this\n  }, __jsx(XAxis, {\n    interval: 0,\n    dataKey: \"name\",\n    tick: __jsx(CustomizedAxisTick, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264\n    },\n    __self: this\n  }), __jsx(YAxis, {\n    unit: \" kpl\",\n    dataKey: \"infections\",\n    tick: {\n      fontSize: 12\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265\n    },\n    __self: this\n  }), __jsx(Tooltip, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266\n    },\n    __self: this\n  }), __jsx(Bar, {\n    dataKey: \"infections\",\n    name: \"Tartunnat\",\n    unit: \" kpl\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  }, areas.map(function (area, index) {\n    return __jsx(Cell, {\n      key: area,\n      fill: colors[index % colors.length],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    });\n  }), __jsx(LabelList, {\n    dataKey: \"infections\",\n    position: \"top\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273\n    },\n    __self: this\n  })))))), __jsx(Box, {\n    width: ['100%', '100%', '100%', '100%', 1 / 2],\n    p: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279\n    },\n    __self: this\n  }, __jsx(Block, {\n    title: \"Log of infections\",\n    footer: \"All infections in Algeria are listed, most recent first. Some id may be missing in the middle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280\n    },\n    __self: this\n  }, __jsx(Table, {\n    height: 350,\n    data: reversedConfirmed,\n    columns: useMemo(function () {\n      return infectionColumns;\n    }, []),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281\n    },\n    __self: this\n  }))), __jsx(Box, {\n    width: ['100%'],\n    p: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284\n    },\n    __self: this\n  }, __jsx(Block, {\n    title: \"Infections' Networks\",\n    footer: \"The figure shows the infections as a network. The number is the serial number of the infection. If the direct vector is not known, the link will be linked to the country of origin. Infections for which the direct cause or the country of origin is not known are excluded. Infections marked in Algeria are most likely to be linked to other infection networks. The color of the cell indicates the country where the infection is likely to have occurred.\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285\n    },\n    __self: this\n  }, __jsx(NetworkGraph, {\n    data: networkGraphData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286\n    },\n    __self: this\n  })))), __jsx(Copyright, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291\n    },\n    __self: this\n  })));\n};\n\nIndex.getInitialProps = function _callee() {\n  var res, data, confirmed;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://raw.githubusercontent.com/stodi1/corona_virus_open_data/master/data.json'));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context.sent;\n          confirmed = data.confirmed.map(function (i) {\n            return _objectSpread({}, i, {\n              infectionSourceCountry: i.infectionSourceCountry === \"\" ? null : i.infectionSourceCountry\n            });\n          });\n          return _context.abrupt(\"return\", _objectSpread({}, data, {\n            confirmed: confirmed\n          }));\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Index;","map":{"version":3,"sources":["/Volumes/Disk/works/react/corona_live_info/pages/index.tsx"],"names":["useMemo","useState","Head","fetch","format","utcToZonedTime","Area","ComposedChart","XAxis","YAxis","Tooltip","CartesianGrid","ResponsiveContainer","BarChart","Bar","Cell","LabelList","Legend","Flex","Box","Button","ButtonGroup","Layout","StatBlock","Block","Copyright","Header","NetworkGraph","Table","infectionColumns","getTimeSeriesData","getPredictionData","getTnfectionsByDistrict","getInfectionsBySourceCountry","getNetworkGraphData","colors","getInfectionsToday","InfectionSourceEnum","CustomizedAxisTick","props","x","y","stroke","payload","isDate","Date","value","timeZone","Index","confirmed","deaths","recovered","date","latestInfection","length","latestInfectionDistrict","healthCareDistrict","latestDeath","latestDeathDistrict","latestRecoveredDistrict","latestRecovered","infectionsToday","cumulativeChartScale","setCumulativeChartScale","forecastChartScale","setForecaseChartScale","infectionDevelopmentData","infectionDevelopmentData30Days","prediction60Days","today","maxValues","dataMaxValue","Math","max","infections","infectionsByDistrict","infectionsByDistrictPercentage","areas","infectionsBySourceCountry","networkGraphData","reversedConfirmed","map","i","index","reverse","top","right","left","bottom","d","fontSize","v","area","e","getInitialProps","res","json","data","infectionSourceCountry"],"mappings":"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","sourcesContent":["\nimport { useMemo, useState } from 'react';\nimport { NextPage } from 'next';\nimport Head from 'next/head';\nimport fetch from 'isomorphic-unfetch';\nimport { format, utcToZonedTime } from 'date-fns-tz';\nimport { Area, AreaChart, ReferenceLine, ComposedChart, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer, BarChart, Bar, Cell, LabelList, Legend } from 'recharts';\nimport { Flex, Box, Button, ButtonGroup } from '@chakra-ui/core';\n\nimport Layout from '../components/Layout';\nimport StatBlock from '../components/StatBlock';\nimport Block from '../components/Block';\nimport Copyright from '../components/Copyright';\nimport Header from '../components/Header';\nimport NetworkGraph from '../components/NetworkGraph';\nimport Table from '../components/Table';\nimport { infectionColumns } from '../components/TableColumns'\n\nimport { getTimeSeriesData, getPredictionData, getTnfectionsByDistrict, getInfectionsBySourceCountry, getNetworkGraphData, colors, getInfectionsToday } from '../utils/chartDataHelper';\n\nexport interface KoronaData {\n  confirmed: Confirmed[];\n  recovered: Recovered[];\n  deaths: any[];\n}\n\nexport interface Confirmed {\n  id: string;\n  date: Date;\n  healthCareDistrict: string;\n  infectionSource: InfectionSourceEnum | number;\n  infectionSourceCountry: string | null;\n}\n\nexport interface Deaths {\n  id: string;\n  date: Date;\n  healthCareDistrict: string;\n}\n\nexport interface Recovered {\n  id: number;\n  date: Date;\n  healthCareDistrict: string;\n}\n\nexport enum InfectionSourceEnum {\n  RelatedToEarlier = \"related to earlier\",\n  Unknown = \"unknown\",\n}\n\nconst CustomizedAxisTick: React.FC<any> = (props) => {\n  const {\n    x, y, stroke, payload, isDate\n  } = props;\n\n  return (\n    <g transform={`translate(${x},${y})`}>\n      <text x={0} y={0} dy={14} fontSize={12} textAnchor=\"end\" fill=\"#666\" transform=\"rotate(-35)\">{isDate ? format(new Date(payload.value), 'd.M.') : payload.value}</text>\n    </g>\n  );\n}\n\n\n\nconst timeZone = 'Europe/Helsinki'\n\nconst Index: NextPage<KoronaData> = ({ confirmed, deaths, recovered }) => {\n  // Map some data for stats blocks\n  const date = new Date('2018-09-01Z16:01:36.386Z')\n  const latestInfection = format(utcToZonedTime(new Date(confirmed[confirmed.length - 1].date), timeZone), 'dd.MM.yyyy - HH:mm', { timeZone });\n  const latestInfectionDistrict = confirmed[confirmed.length - 1].healthCareDistrict;\n  const latestDeath = deaths.length ? format(utcToZonedTime(new Date(deaths[deaths.length - 1].date), timeZone), 'd.M.yyyy') : null;\n  const latestDeathDistrict = deaths.length ? deaths[deaths.length - 1].healthCareDistrict : null;\n  const latestRecoveredDistrict = recovered.length ? recovered[recovered.length - 1].healthCareDistrict : null;\n  const latestRecovered = recovered.length ? format(utcToZonedTime(new Date(recovered[recovered.length - 1].date), timeZone), 'd.M.yyyy') : null;\n  const infectionsToday = getInfectionsToday(confirmed);\n\n  const [cumulativeChartScale, setCumulativeChartScale] = useState<'linear' | 'log'>('linear')\n  const [forecastChartScale, setForecaseChartScale] = useState<'linear' | 'log'>('linear')\n\n  // Map data to show development of infections\n  const { infectionDevelopmentData, infectionDevelopmentData30Days } = getTimeSeriesData(confirmed, recovered, deaths);\n  const { prediction60Days, today } = getPredictionData(confirmed, deaths, recovered);\n  const maxValues = infectionDevelopmentData30Days[infectionDevelopmentData30Days.length - 1];\n  const dataMaxValue = Math.max(maxValues.deaths, maxValues.infections, maxValues.infections);\n  const { infectionsByDistrict, infectionsByDistrictPercentage, areas } = getTnfectionsByDistrict(confirmed);\n  const { infectionsBySourceCountry } = getInfectionsBySourceCountry(confirmed);\n  const networkGraphData = getNetworkGraphData(confirmed);\n  const reversedConfirmed = confirmed.map((i, index) => ({index: index+1, ...i})).reverse()\n\n  return (\n    <Layout>\n      <Head>\n        <title>Coronavirus infection in Finland – infections: {confirmed.length || 0} - recovered: {recovered.length || 0} - died: {deaths.length || 0}</title>\n        <meta name=\"description\" content={`Suomen koronavirus-tartuntatilanne – tartunnat: ${confirmed.length || 0} - parantuneet: ${recovered.length || 0} - menehtyneet: ${deaths.length || 0}`} />\n        <meta property=\"og:title\" content={`Suomen koronavirus-tartuntatilanne`} />\n        <meta property=\"og:description\" content={`Tartuntoja tällä hetkellä: ${confirmed.length || 0} - parantuneet: ${recovered.length || 0} - menehtyneet: ${deaths.length || 0}`} />\n        <meta property=\"og:site_name\" content=\"Suomen koronavirus-tartuntatilanne\" />\n        <meta property=\"og:locale\" content=\"fi_FI\" />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:image\" content=\"/images/corona-virus.png\" />\n        <meta property=\"og:image:width\" content=\"1920\" />\n        <meta property=\"og:image:height\" content=\"1928\" />\n        <meta property=\"og:url\" content=\"https://korona.kans.io\" />\n      </Head>\n      <Flex alignItems=\"center\" flexDirection=\"column\" flex=\"1\" width={\"100%\"} maxWidth=\"1440px\" margin=\"auto\">\n        <Header />\n        <Flex flexWrap=\"wrap\" flexDirection=\"row\" justifyContent=\"center\" alignItems=\"stretch\" flex=\"1\" width={\"100%\"}>\n          <Box width={['100%', '100%', 1 / 3, 1 / 3]} p={3}>\n            <Block title=\"Infections\" textAlign=\"center\" extraInfo={`New infections today ${infectionsToday}`} footer={`Latest infection ${latestInfection} (${latestInfectionDistrict || 'unknown'})`}>\n              <StatBlock count={confirmed.length} helpText={`New infections today: ${infectionsToday}`} />\n            </Block>\n          </Box>\n          <Box width={['100%', '100%', 1 / 3, 1 / 3]} p={3}>\n            <Block title=\"Died\" footer={latestDeath ? `Latest death ${latestDeath} (${latestDeathDistrict || 'unknown'})` : 'No death'}>\n              <StatBlock count={deaths.length || 0} />\n            </Block>\n          </Box>\n          <Box width={['100%', '100%', 1 / 3, 1 / 3]} p={3}>\n            <Block title=\"Recovered\" footer={latestRecovered ? `Latest recovery ${latestRecovered} (${latestRecoveredDistrict || 'unknown'})` : ' '}>\n              <StatBlock count={recovered.length || 0} />\n            </Block>\n          </Box>\n          \n          <Box width={['100%']} p={3}>\n            <Block title=\"Cumulative evolution (30 days)\" footer=\"Cumulative evolution of infections, heals and deaths in the last 30 days\">\n            <ButtonGroup spacing={0} alignSelf=\"center\" display=\"flex\" justifyContent=\"center\" marginTop=\"-15px\">\n              <Button size=\"xs\" fontFamily=\"Space Grotesk Regular\" px={3} letterSpacing=\"1px\" borderRadius=\"4px 0px 0px 4px\" borderWidth=\"0px\" isActive={cumulativeChartScale === 'linear'} onClick={() => setCumulativeChartScale('linear')}>\n                Linear\n              </Button>\n              <Button size=\"xs\" fontFamily=\"Space Grotesk Regular\" px={3} letterSpacing=\"1px\" borderRadius=\"0px 4px 4px 0px\" borderWidth=\"0px\" isActive={cumulativeChartScale === 'log'}  onClick={() => setCumulativeChartScale('log')}>\n                Logarithmic\n              </Button>\n            </ButtonGroup>\n              <ResponsiveContainer width={'100%'} height={380}>\n                <ComposedChart\n                  data={infectionDevelopmentData30Days}\n                  margin={{ top: 20, right: 30, left: 0, bottom: 30 }}\n                >\n                  <defs>\n                    <linearGradient id=\"colorInfection\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"5%\" stopColor={colors[8]} stopOpacity={0.6} />\n                      <stop offset=\"95%\" stopColor={colors[8]} stopOpacity={0} />\n                    </linearGradient>\n                    <linearGradient id=\"colorRecovered\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"5%\" stopColor={colors[7]} stopOpacity={0.6} />\n                      <stop offset=\"95%\" stopColor={colors[7]} stopOpacity={0} />\n                    </linearGradient>\n                    <linearGradient id=\"colorDeaths\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"5%\" stopColor={colors[0]} stopOpacity={0.6} />\n                      <stop offset=\"95%\" stopColor={colors[0]} stopOpacity={0} />\n                    </linearGradient>\n                  </defs>\n                  <XAxis tickFormatter={d => format(new Date(d), 'd.M.')} tick={<CustomizedAxisTick isDate />} dataKey=\"date\" domain={['dataMin', 'dataMax']} type=\"number\" scale=\"time\" />\n                  <YAxis scale={cumulativeChartScale} dataKey=\"infections\" domain={['dataMin', dataMaxValue + 10]} unit=\" kpl\" tick={{ fontSize: 12 }} name=\"Tartunnat\" />\n                  <CartesianGrid opacity={0.2} />\n                  <Tooltip labelFormatter={v => format(new Date(v), 'dd.MM.yyyy')} />\n                  <Bar fill={colors[1]} opacity={0.4} dataKey=\"infectionsDaily\" name=\"Today's infections\" unit=\" kpl\" />\n                  <Area type=\"monotone\" unit=\" kpl\" name=\"Total infections\" dataKey=\"infections\" stroke={colors[8]} fillOpacity={1} fill=\"url(#colorInfection)\" />\n                  <Area type=\"monotone\" unit=\" kpl\" name=\"Total recovered\" dataKey=\"recovered\" stroke={colors[7]} fillOpacity={1} fill=\"url(#colorRecovered)\" />\n                  <Area type=\"monotone\" unit=\" kpl\" name=\"Total deaths\" dataKey=\"deaths\" stroke={colors[0]} fillOpacity={1} fill=\"url(#colorDeaths)\" />\n                  <Legend wrapperStyle={{bottom: '10px'}} />\n                </ComposedChart>\n              </ResponsiveContainer>\n            </Block>\n          </Box>\n          {/*\n          <Box width={['100%']} p={3}>\n            <Block title=\"Tartuntojen kumulatiivinen ennustemalli\" footer={`Tartuntojen kehityksen ennustemalli 60 päivää. Laskee ennustetun eksponentiaalisen kasvun käyttämällä aiemmin luotuja tietoja.  Käytetty <a style=\"color: #319795;\" href=\"https://github.com/mljs/regression-exponential\" target=\"_blank\">exponential-regression</a> kirjastoa.`}>\n              <ButtonGroup spacing={0} alignSelf=\"center\" display=\"flex\" justifyContent=\"center\" marginTop=\"-15px\">\n                <Button size=\"xs\" fontFamily=\"Space Grotesk Regular\" px={3} letterSpacing=\"1px\" borderRadius=\"4px 0px 0px 4px\" borderWidth=\"0px\" isActive={forecastChartScale === 'linear'} onClick={() => setForecaseChartScale('linear')}>\n                  Lineaarinen\n                </Button>\n                <Button size=\"xs\" fontFamily=\"Space Grotesk Regular\" px={3} letterSpacing=\"1px\" borderRadius=\"0px 4px 4px 0px\" borderWidth=\"0px\" isActive={forecastChartScale === 'log'}  onClick={() => setForecaseChartScale('log')}>\n                  Logaritminen\n                </Button>\n              </ButtonGroup>\n              <ResponsiveContainer width={'100%'} height={350}>\n                <AreaChart\n                    data={prediction60Days}\n                    margin={{ top: 20, right: 30, left: 0, bottom: 20 }}\n                >\n                  <defs>\n                    <linearGradient id=\"colorInfection\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"5%\" stopColor={colors[8]} stopOpacity={0.6} />\n                      <stop offset=\"95%\" stopColor={colors[8]} stopOpacity={0} />\n                    </linearGradient>\n                  </defs>\n                  <XAxis tickFormatter={d => format(new Date(d), 'd.M.')} tick={<CustomizedAxisTick isDate />} dataKey=\"date\" domain={['dataMin', 'dataMax']} type=\"number\" scale=\"time\" />\n                  <YAxis scale={forecastChartScale} dataKey=\"infections\" domain={['auto', 'auto']} unit=\" kpl\" tick={{ fontSize: 12 }} name=\"Tartunnat\" />\n\n                  <CartesianGrid opacity={0.2} />\n                  <ReferenceLine\n                    x={today}\n                    stroke=\"rgba(0,0,0,.5)\"\n                    // @ts-ignore\n                    label={{ position: 'top', value: 'Nyt', fill: 'rgba(0,0,0,0.5)', fontSize: 12 }}\n                    strokeDasharray=\"3 3\" />\n                  <Tooltip labelFormatter={v => format(new Date(v), 'dd.MM.yyyy')} />\n                  <Area type=\"monotone\" name=\"Ennuste\" unit=\" kpl\" dataKey=\"infections\" stroke={colors[8]} fillOpacity={1} fill=\"url(#colorInfection)\" />\n                </AreaChart>\n              </ResponsiveContainer>\n            </Block>\n          </Box>\n          */}\n          <Box width={['100%', '100%', '100%', '100%', 1 / 2]} p={3}>\n            <Block title=\"Infections by hospital district\" footer=\"Infections by hospital district\">\n              <ResponsiveContainer width={'100%'} height={350}>\n                <BarChart\n                  data={infectionsByDistrict}\n                  margin={{\n                    top: 20, right: 30, left: 0, bottom: 85,\n                  }}\n                >\n                  <XAxis interval={0} dataKey=\"name\" tick={<CustomizedAxisTick />} />\n                  <YAxis yAxisId=\"left\" unit=\" kpl\" dataKey=\"infections\" tick={{ fontSize: 12 }} />\n                  <Tooltip />\n                  <Bar dataKey=\"infections\" name=\"Tartunnat\" unit=\" kpl\" yAxisId=\"left\">\n                    {\n                      areas.map((area, index) => (\n                        <Cell key={area} fill={colors[index % colors.length]} />\n                      ))\n                    }\n                    <LabelList dataKey=\"infections\" position=\"top\" formatter={(e) => e} />\n                  </Bar>\n                </BarChart>\n              </ResponsiveContainer>\n            </Block>\n          </Box>\n          <Box width={['100%', '100%', '100%', '100%', 1 / 2]} p={3}>\n            <Block title=\"Infections by hospital district / Size of the hospital district\" footer=\"Infections by hospital district / Size of the hospital district\">\n              <ResponsiveContainer width={'100%'} height={350}>\n                <BarChart\n                  data={infectionsByDistrictPercentage}\n                  margin={{\n                    top: 20, right: 30, left: 0, bottom: 85,\n                  }}\n                >\n                  <XAxis interval={0} dataKey=\"name\" tick={<CustomizedAxisTick />} />\n                  <YAxis unit=\" %\" dataKey=\"perDistrict\" tick={{ fontSize: 12 }} />\n                  <Tooltip />\n                  <Bar dataKey=\"perDistrict\" name=\"%-osuus väestöstä\" unit=\" %\">\n                    {\n                      areas.map((area, index) => (\n                        <Cell key={area} fill={colors[index % colors.length]} />\n                      ))\n                    }\n                    <LabelList dataKey=\"perDistict\" position=\"top\" formatter={(e) => e} />\n                  </Bar>\n                </BarChart>\n              </ResponsiveContainer>\n            </Block>\n          </Box>\n          <Box width={['100%', '100%', '100%', '100%', 1/2]} p={3}>\n            <Block title=\"Countries of origin of infections\" footer=\"Number of infections by country of origin\">\n              <ResponsiveContainer width={'100%'} height={350}>\n                <BarChart\n                  data={infectionsBySourceCountry}\n                  margin={{\n                    top: 20, right: 30, left: 0, bottom: 85,\n                  }}\n                >\n                  <XAxis interval={0} dataKey=\"name\" tick={<CustomizedAxisTick />} />\n                  <YAxis unit=\" kpl\" dataKey=\"infections\" tick={{ fontSize: 12 }} />\n                  <Tooltip />\n                  <Bar dataKey=\"infections\" name=\"Tartunnat\" unit=\" kpl\">\n                    {\n                      areas.map((area, index) => (\n                        <Cell key={area} fill={colors[index % colors.length]} />\n                      ))\n                    }\n                    <LabelList dataKey=\"infections\" position=\"top\" />\n                  </Bar>\n                </BarChart>\n              </ResponsiveContainer>\n            </Block>\n          </Box>\n          <Box width={['100%', '100%', '100%', '100%', 1/2]} p={3}>\n            <Block title=\"Log of infections\" footer=\"All infections in Algeria are listed, most recent first. Some id may be missing in the middle\">\n              <Table height={350} data={reversedConfirmed} columns={useMemo(() => infectionColumns, [])} />\n            </Block>\n          </Box>\n          <Box width={['100%']} p={3}>\n            <Block title=\"Infections' Networks\" footer=\"The figure shows the infections as a network. The number is the serial number of the infection. If the direct vector is not known, the link will be linked to the country of origin. Infections for which the direct cause or the country of origin is not known are excluded. Infections marked in Algeria are most likely to be linked to other infection networks. The color of the cell indicates the country where the infection is likely to have occurred.\">\n              <NetworkGraph data={networkGraphData} />\n            </Block>\n          </Box>\n        </Flex>\n\n        <Copyright />\n      </Flex>\n    </Layout>\n  );\n}\n\nIndex.getInitialProps = async function () {\n  const res = await fetch('https://raw.githubusercontent.com/stodi1/corona_virus_open_data/master/data.json');\n  const data = await res.json();\n  const confirmed = data.confirmed.map((i:Confirmed) => ({...i, infectionSourceCountry: i.infectionSourceCountry === \"\" ? null : i.infectionSourceCountry}))\n  return {...data, confirmed};\n};\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}