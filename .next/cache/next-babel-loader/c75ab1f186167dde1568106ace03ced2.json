{"ast":null,"code":"var _jsxFileName = \"/Volumes/Disk/works/react/corona_live_info/components/Table.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport styled from '@emotion/styled';\nimport { useTable } from 'react-table';\nconst Styles = styled.div`\n  /* padding: 1rem; */\n  -webkit-overflow-scrolling: touch;\n  table {\n    border-spacing: 0;\n    border-bottom: solid 1px rgba(102,119,136,.15);\n    width: 100%;\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n    th {\n      border-top: solid 1px white;\n      position: sticky;\n      top: -1px;\n      background: white;\n    }\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem 1rem;\n      text-align: left;\n      border-bottom: solid 1px rgba(102,119,136,.15);\n      border-right: 0px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`;\n\nconst Table = ({\n  columns,\n  data,\n  height\n}) => {\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  }); // Render the UI for your table\n\n  return __jsx(Styles, {\n    style: {\n      height: `${height}px`,\n      overflowY: 'scroll'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, __jsx(\"table\", _extends({}, getTableProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), __jsx(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, headerGroups.map(headerGroup => __jsx(\"tr\", _extends({}, headerGroup.getHeaderGroupProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), headerGroup.headers.map(column => __jsx(\"th\", _extends({}, column.getHeaderProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), column.render('Header')))))), __jsx(\"tbody\", _extends({}, getTableBodyProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), rows.map((row, i) => {\n    prepareRow(row);\n    return __jsx(\"tr\", _extends({}, row.getRowProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), row.cells.map(cell => {\n      return __jsx(\"td\", _extends({}, cell.getCellProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }), cell.render('Cell'));\n    }));\n  }))));\n};\n\nexport default Table;","map":{"version":3,"sources":["/Volumes/Disk/works/react/corona_live_info/components/Table.tsx"],"names":["React","styled","useTable","Styles","div","Table","columns","data","height","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","overflowY","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,MAAMC,MAAM,GAAGF,MAAM,CAACG,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAA1B;;AAyCA,MAAMC,KAA0B,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,IAAX;AAAiBC,EAAAA;AAAjB,CAAD,KAA+B;AAChE;AACA,QAAM;AACJC,IAAAA,aADI;AAEJC,IAAAA,iBAFI;AAGJC,IAAAA,YAHI;AAIJC,IAAAA,IAJI;AAKJC,IAAAA;AALI,MAMFX,QAAQ,CAAC;AACXI,IAAAA,OADW;AAEXC,IAAAA;AAFW,GAAD,CANZ,CAFgE,CAahE;;AACA,SACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAE;AAACC,MAAAA,MAAM,EAAG,GAAEA,MAAO,IAAnB;AAAwBM,MAAAA,SAAS,EAAE;AAAnC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,4BAAWL,aAAa,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,YAAY,CAACI,GAAb,CAAiBC,WAAW,IAC3B,yBAAQA,WAAW,CAACC,mBAAZ,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGD,WAAW,CAACE,OAAZ,CAAoBH,GAApB,CAAwBI,MAAM,IAC7B,yBAAQA,MAAM,CAACC,cAAP,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAkCD,MAAM,CAACE,MAAP,CAAc,QAAd,CAAlC,CADD,CADH,CADD,CADH,CADF,EAUE,4BAAWX,iBAAiB,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGE,IAAI,CAACG,GAAL,CAAS,CAACO,GAAD,EAAMC,CAAN,KAAY;AACpBV,IAAAA,UAAU,CAACS,GAAD,CAAV;AACA,WACE,yBAAQA,GAAG,CAACE,WAAJ,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACGF,GAAG,CAACG,KAAJ,CAAUV,GAAV,CAAcW,IAAI,IAAI;AACrB,aAAO,yBAAQA,IAAI,CAACC,YAAL,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA8BD,IAAI,CAACL,MAAL,CAAY,MAAZ,CAA9B,CAAP;AACD,KAFA,CADH,CADF;AAOD,GATA,CADH,CAVF,CADA,CADF;AA2BD,CAzCD;;AA2CA,eAAehB,KAAf","sourcesContent":["import React from 'react'\nimport styled from '@emotion/styled';\nimport { useTable } from 'react-table'\n\nconst Styles = styled.div`\n  /* padding: 1rem; */\n  -webkit-overflow-scrolling: touch;\n  table {\n    border-spacing: 0;\n    border-bottom: solid 1px rgba(102,119,136,.15);\n    width: 100%;\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n    th {\n      border-top: solid 1px white;\n      position: sticky;\n      top: -1px;\n      background: white;\n    }\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem 1rem;\n      text-align: left;\n      border-bottom: solid 1px rgba(102,119,136,.15);\n      border-right: 0px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`\n\ninterface TableProps {\n  columns: any,\n  data: any,\n  height?: number;\n}\n\nconst Table:React.FC<TableProps> = ({ columns, data, height }) => {\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({\n    columns,\n    data,\n  })\n\n  // Render the UI for your table\n  return (\n    <Styles style={{height: `${height}px`, overflowY: 'scroll'}}>\n    <table {...getTableProps()}>\n      <thead>\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row, i) => {\n          prepareRow(row)\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map(cell => {\n                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n              })}\n            </tr>\n          )\n        })}\n      </tbody>\n    </table>\n    </Styles>\n  )\n}\n\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}