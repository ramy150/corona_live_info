{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { format, sub, eachDayOfInterval, isSameDay, isToday } from 'date-fns';\nimport groupBy from 'lodash.groupby';\nimport sortBy from 'lodash.sortby';\nimport ExponentialRegression from 'ml-regression-exponential';\n// Map data to show development of infections\nexport var colors = ['#003f5c', '#2fab8e', '#665191', '#a05195', '#d45087', '#f95d6a', '#ff7c43', '#ffa600', '#ee2320'];\nexport var healtCareDistricts = [{\n  name: 'HUS',\n  people: 1651715\n}, {\n  name: 'Etelä-Karjala',\n  people: 129865\n}, {\n  name: 'Kymenlaakso',\n  people: 168691\n}, {\n  name: 'Päijät-Häme',\n  people: 211957\n}, {\n  name: 'Pohjois-Savo',\n  people: 246653\n}, {\n  name: 'Etelä-Savo',\n  people: 101518\n}, {\n  name: 'Itä-Savo',\n  people: 42221\n}, {\n  name: 'Keski-Suomi',\n  people: 252902\n}, {\n  name: 'Pohjois-Karjala',\n  people: 166441\n}, {\n  name: 'Pohjois-Pohjanmaa',\n  people: 409043\n}, {\n  name: 'Kainuu',\n  people: 73959\n}, {\n  name: 'Keski-Pohjanmaa',\n  people: 78124\n}, {\n  name: 'Lappi',\n  people: 117447\n}, {\n  name: 'Länsi-Pohja',\n  people: 61776\n}, {\n  name: 'Pirkanmaa',\n  people: 532261\n}, {\n  name: 'Etelä-Pohjanmaa',\n  people: 195583\n}, {\n  name: 'Kanta-Häme',\n  people: 172720\n}, {\n  name: 'Varsinais-Suomi',\n  people: 480626\n}, {\n  name: 'Satakunta',\n  people: 220398\n}, {\n  name: 'Vaasa',\n  people: 169741\n}];\nvar peopleTotal = healtCareDistricts.reduce(function (acc, curr) {\n  return curr.people + acc;\n}, 0);\n;\n;\nexport var getTimeSeriesData = function getTimeSeriesData(confirmed, recovered, deaths) {\n  var sortedData = sortBy(confirmed, 'date').map(function (item) {\n    return _objectSpread({}, item, {\n      dateString: format(new Date(item.date), 'yyyy-MM-dd')\n    });\n  });\n  var sortedDataRecoverd = sortBy(recovered, 'date').map(function (item) {\n    return _objectSpread({}, item, {\n      dateString: format(new Date(item.date), 'yyyy-MM-dd')\n    });\n  });\n  var sortedDataDeaths = sortBy(deaths, 'date').map(function (item) {\n    return _objectSpread({}, item, {\n      dateString: format(new Date(item.date), 'yyyy-MM-dd')\n    });\n  });\n  var daysIntervalSinceFirstInfection = eachDayOfInterval({\n    start: new Date(sortedData[0].date),\n    end: new Date(sortedData[sortedData.length - 1].date)\n  });\n  var infectionDevelopmentData = [];\n  daysIntervalSinceFirstInfection.reduce(function (acc, curr) {\n    var items = sortedData.filter(function (item) {\n      return isSameDay(new Date(item.date), curr);\n    });\n    var itemsRecovered = sortedDataRecoverd.filter(function (item) {\n      return isSameDay(new Date(item.date), curr);\n    });\n    var itemsDeaths = sortedDataDeaths.filter(function (item) {\n      return isSameDay(new Date(item.date), curr);\n    });\n    acc.deaths = acc.deaths + itemsDeaths.length;\n    acc.infections = acc.infections + items.length;\n    acc.recovered = acc.recovered + itemsRecovered.length;\n    infectionDevelopmentData.push(_objectSpread({\n      date: curr.getTime(),\n      infectionsDaily: items.length\n    }, acc));\n    return acc;\n  }, {\n    infections: 0,\n    deaths: 0,\n    recovered: 0\n  });\n  var thirtyDaysAgo = sub(new Date(), {\n    days: 30\n  });\n  var infectionDevelopmentData30Days = infectionDevelopmentData.filter(function (item) {\n    return item.date > thirtyDaysAgo.getTime();\n  });\n  return {\n    infectionDevelopmentData: infectionDevelopmentData,\n    infectionDevelopmentData30Days: infectionDevelopmentData30Days\n  };\n};\nexport var getPredictionData = function getPredictionData(confirmed, deaths, recovered) {\n  var currentData30Days = getTimeSeriesData(confirmed, recovered, deaths).infectionDevelopmentData30Days;\n  var indexes = currentData30Days.map(function (d, i) {\n    return i + 1;\n  });\n  var infections = currentData30Days.map(function (d) {\n    return d.infections;\n  });\n  var x = indexes;\n  var y = infections;\n  var regression = new ExponentialRegression(x, y);\n  var prediction60Days = Array.from(new Array(60)).map(function (x, i) {\n    var date = new Date(currentData30Days[0].date);\n    date.setDate(date.getDate() + i);\n    return {\n      date: date.getTime(),\n      infections: Math.round(regression.predict(i)) === 0 ? null : Math.round(regression.predict(i))\n    };\n  });\n  return {\n    prediction60Days: prediction60Days,\n    today: prediction60Days[29].date\n  };\n};\nexport var getTnfectionsByDistrict = function getTnfectionsByDistrict(confirmed) {\n  var groupedData = groupBy(confirmed, 'healthCareDistrict');\n  var infectionsByDistrict = Object.entries(groupedData).map(function (value) {\n    var _healtCareDistricts$f;\n\n    return {\n      name: value[0],\n      infections: value[1].length,\n      // @ts-ignore\n      people: Math.round(((_healtCareDistricts$f = healtCareDistricts.find(function (i) {\n        return i.name === value[0];\n      })) === null || _healtCareDistricts$f === void 0 ? void 0 : _healtCareDistricts$f.people) / peopleTotal * 100)\n    };\n  });\n  var infectionsByDistrictPercentage = Object.entries(groupedData).map(function (value) {\n    var _healtCareDistricts$f2, _healtCareDistricts$f3;\n\n    return {\n      name: value[0],\n      infections: Math.round(value[1].length / confirmed.length * 100),\n      // @ts-ignore\n      people: Math.round(((_healtCareDistricts$f2 = healtCareDistricts.find(function (i) {\n        return i.name === value[0];\n      })) === null || _healtCareDistricts$f2 === void 0 ? void 0 : _healtCareDistricts$f2.people) / peopleTotal * 100),\n      // @ts-ignore\n      perDistrict: Math.round(value[1].length / ((_healtCareDistricts$f3 = healtCareDistricts.find(function (i) {\n        return i.name === value[0];\n      })) === null || _healtCareDistricts$f3 === void 0 ? void 0 : _healtCareDistricts$f3.people) * 100 * 10000) / 10000\n    };\n  });\n  var areas = Object.entries(groupedData).map(function (value) {\n    return value[0];\n  });\n  return {\n    infectionsByDistrict: infectionsByDistrict,\n    infectionsByDistrictPercentage: infectionsByDistrictPercentage,\n    areas: areas\n  };\n};\nexport var getInfectionsBySourceCountry = function getInfectionsBySourceCountry(confirmed) {\n  var groupedData = groupBy(confirmed, 'infectionSourceCountry');\n  var infectionsBySourceCountry = Object.entries(groupedData).map(function (value) {\n    return {\n      name: value[0] === 'null' ? 'Ei tiedossa' : value[0],\n      infections: value[1].length\n    };\n  });\n  var areas = Object.entries(groupedData).map(function (value) {\n    return value[0];\n  });\n  return {\n    infectionsBySourceCountry: infectionsBySourceCountry,\n    areas: areas\n  };\n};\n\nvar getGroup = function getGroup(infection, confirmed) {\n  if (typeof infection.infectionSource === 'number') {\n    var item = confirmed.find(function (i) {\n      return Number(i.id) === infection.infectionSource;\n    });\n\n    if (item) {\n      if (typeof item.infectionSource === 'number') {\n        return getGroup(item, confirmed);\n      }\n\n      if (item.infectionSourceCountry) {\n        return item.infectionSourceCountry;\n      }\n\n      return null;\n    }\n  }\n\n  return infection.infectionSourceCountry;\n};\n\nexport var getInfectionsToday = function getInfectionsToday(confirmed) {\n  var infectionsToday = confirmed.filter(function (infection) {\n    return isToday(new Date(infection.date));\n  });\n  return infectionsToday.length || 0;\n};\nexport var getNetworkGraphData = function getNetworkGraphData(confirmed) {\n  var infectionSources = Array.from(new Set(confirmed.filter(function (i) {\n    return typeof i.infectionSource === 'number';\n  }).map(function (inf) {\n    return inf.infectionSource;\n  })));\n  var uniqueCountries = Array.from(new Set(confirmed.filter(function (i) {\n    return !!i.infectionSourceCountry;\n  }).map(function (inff) {\n    return inff.infectionSourceCountry;\n  })));\n  var allNodes = confirmed.map(function (infection, index) {\n    return _objectSpread({\n      index: index + 1\n    }, infection, {\n      id: Number(infection.id),\n      label: \"#0\".concat(index + 1),\n      // group: getGroup(infection, confirmed),\n      color: \"\".concat(colors[uniqueCountries.indexOf(infection.infectionSourceCountry)])\n    });\n  });\n  var nodes = allNodes.filter(function (i) {\n    return infectionSources.includes(i.id) || typeof i.infectionSource === 'number';\n  }); // @ts-ignore\n\n  var edges = allNodes.map(function (i) {\n    return {\n      from: typeof i.infectionSource === 'number' ? i.infectionSource : i.infectionSourceCountry,\n      to: i.id\n    };\n  });\n  var filteredNodes = allNodes.filter(function (i) {\n    return !!i.infectionSourceCountry || typeof i.infectionSource === 'number';\n  }); // @ts-ignore\n\n  uniqueCountries.map(function (country, index) {\n    return filteredNodes.push({\n      id: country,\n      label: country,\n      color: \"\".concat(colors[uniqueCountries.indexOf(country)])\n    });\n  });\n  return {\n    nodes: filteredNodes,\n    edges: edges\n  };\n};","map":{"version":3,"sources":["/Volumes/Disk/works/react/corona_live_info/utils/chartDataHelper.ts"],"names":["format","sub","eachDayOfInterval","isSameDay","isToday","groupBy","sortBy","ExponentialRegression","colors","healtCareDistricts","name","people","peopleTotal","reduce","acc","curr","getTimeSeriesData","confirmed","recovered","deaths","sortedData","map","item","dateString","Date","date","sortedDataRecoverd","sortedDataDeaths","daysIntervalSinceFirstInfection","start","end","length","infectionDevelopmentData","items","filter","itemsRecovered","itemsDeaths","infections","push","getTime","infectionsDaily","thirtyDaysAgo","days","infectionDevelopmentData30Days","getPredictionData","currentData30Days","indexes","d","i","x","y","regression","prediction60Days","Array","from","setDate","getDate","Math","round","predict","today","getTnfectionsByDistrict","groupedData","infectionsByDistrict","Object","entries","value","find","infectionsByDistrictPercentage","perDistrict","areas","getInfectionsBySourceCountry","infectionsBySourceCountry","getGroup","infection","infectionSource","Number","id","infectionSourceCountry","getInfectionsToday","infectionsToday","getNetworkGraphData","infectionSources","Set","inf","uniqueCountries","inff","allNodes","index","label","color","indexOf","nodes","includes","edges","to","filteredNodes","country"],"mappings":";;;;;;AAAA,SAASA,MAAT,EAAiBC,GAAjB,EAAsBC,iBAAtB,EAAyCC,SAAzC,EAAoDC,OAApD,QAAmE,UAAnE;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,qBAAP,MAAkC,2BAAlC;AAGA;AACA,OAAO,IAAMC,MAAM,GAAG,CACpB,SADoB,EAEpB,SAFoB,EAGpB,SAHoB,EAIpB,SAJoB,EAKpB,SALoB,EAMpB,SANoB,EAOpB,SAPoB,EAQpB,SARoB,EASpB,SAToB,CAAf;AAYP,OAAO,IAAMC,kBAAkB,GAAG,CAChC;AAAEC,EAAAA,IAAI,EAAE,KAAR;AAAeC,EAAAA,MAAM,EAAE;AAAvB,CADgC,EAEhC;AAAED,EAAAA,IAAI,EAAE,eAAR;AAAyBC,EAAAA,MAAM,EAAE;AAAjC,CAFgC,EAGhC;AAAED,EAAAA,IAAI,EAAE,aAAR;AAAuBC,EAAAA,MAAM,EAAE;AAA/B,CAHgC,EAIhC;AAAED,EAAAA,IAAI,EAAE,aAAR;AAAuBC,EAAAA,MAAM,EAAE;AAA/B,CAJgC,EAKhC;AAAED,EAAAA,IAAI,EAAE,cAAR;AAAwBC,EAAAA,MAAM,EAAE;AAAhC,CALgC,EAMhC;AAAED,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,MAAM,EAAE;AAA9B,CANgC,EAOhC;AAAED,EAAAA,IAAI,EAAE,UAAR;AAAoBC,EAAAA,MAAM,EAAE;AAA5B,CAPgC,EAQhC;AAAED,EAAAA,IAAI,EAAE,aAAR;AAAuBC,EAAAA,MAAM,EAAE;AAA/B,CARgC,EAShC;AAAED,EAAAA,IAAI,EAAE,iBAAR;AAA2BC,EAAAA,MAAM,EAAE;AAAnC,CATgC,EAUhC;AAAED,EAAAA,IAAI,EAAE,mBAAR;AAA6BC,EAAAA,MAAM,EAAE;AAArC,CAVgC,EAWhC;AAAED,EAAAA,IAAI,EAAE,QAAR;AAAkBC,EAAAA,MAAM,EAAE;AAA1B,CAXgC,EAYhC;AAAED,EAAAA,IAAI,EAAE,iBAAR;AAA2BC,EAAAA,MAAM,EAAE;AAAnC,CAZgC,EAahC;AAAED,EAAAA,IAAI,EAAE,OAAR;AAAiBC,EAAAA,MAAM,EAAE;AAAzB,CAbgC,EAchC;AAAED,EAAAA,IAAI,EAAE,aAAR;AAAuBC,EAAAA,MAAM,EAAE;AAA/B,CAdgC,EAehC;AAAED,EAAAA,IAAI,EAAE,WAAR;AAAqBC,EAAAA,MAAM,EAAE;AAA7B,CAfgC,EAgBhC;AAAED,EAAAA,IAAI,EAAE,iBAAR;AAA2BC,EAAAA,MAAM,EAAE;AAAnC,CAhBgC,EAiBhC;AAAED,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,MAAM,EAAE;AAA9B,CAjBgC,EAkBhC;AAAED,EAAAA,IAAI,EAAE,iBAAR;AAA2BC,EAAAA,MAAM,EAAE;AAAnC,CAlBgC,EAmBhC;AAAED,EAAAA,IAAI,EAAE,WAAR;AAAqBC,EAAAA,MAAM,EAAE;AAA7B,CAnBgC,EAoBhC;AAAED,EAAAA,IAAI,EAAE,OAAR;AAAiBC,EAAAA,MAAM,EAAE;AAAzB,CApBgC,CAA3B;AAuBP,IAAMC,WAAW,GAAGH,kBAAkB,CAACI,MAAnB,CAA0B,UAACC,GAAD,EAAMC,IAAN;AAAA,SAAeA,IAAI,CAACJ,MAAL,GAAcG,GAA7B;AAAA,CAA1B,EAA4D,CAA5D,CAApB;AAQC;AAKA;AAOD,OAAO,IAAME,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,SAAD,EAAyBC,SAAzB,EAAiDC,MAAjD,EAG5B;AAEH,MAAMC,UAAU,GAAGd,MAAM,CAACW,SAAD,EAAY,MAAZ,CAAN,CAA0BI,GAA1B,CAA8B,UAAAC,IAAI;AAAA,6BAAUA,IAAV;AAAgBC,MAAAA,UAAU,EAAEvB,MAAM,CAAC,IAAIwB,IAAJ,CAASF,IAAI,CAACG,IAAd,CAAD,EAAsB,YAAtB;AAAlC;AAAA,GAAlC,CAAnB;AACA,MAAMC,kBAAkB,GAAGpB,MAAM,CAACY,SAAD,EAAY,MAAZ,CAAN,CAA0BG,GAA1B,CAA8B,UAAAC,IAAI;AAAA,6BAAUA,IAAV;AAAgBC,MAAAA,UAAU,EAAEvB,MAAM,CAAC,IAAIwB,IAAJ,CAASF,IAAI,CAACG,IAAd,CAAD,EAAsB,YAAtB;AAAlC;AAAA,GAAlC,CAA3B;AACA,MAAME,gBAAgB,GAAGrB,MAAM,CAACa,MAAD,EAAS,MAAT,CAAN,CAAuBE,GAAvB,CAA2B,UAAAC,IAAI;AAAA,6BAAUA,IAAV;AAAgBC,MAAAA,UAAU,EAAEvB,MAAM,CAAC,IAAIwB,IAAJ,CAASF,IAAI,CAACG,IAAd,CAAD,EAAsB,YAAtB;AAAlC;AAAA,GAA/B,CAAzB;AAGA,MAAMG,+BAA+B,GAAG1B,iBAAiB,CAAC;AAAE2B,IAAAA,KAAK,EAAE,IAAIL,IAAJ,CAASJ,UAAU,CAAC,CAAD,CAAV,CAAcK,IAAvB,CAAT;AAAuCK,IAAAA,GAAG,EAAE,IAAIN,IAAJ,CAASJ,UAAU,CAACA,UAAU,CAACW,MAAX,GAAoB,CAArB,CAAV,CAAkCN,IAA3C;AAA5C,GAAD,CAAzD;AAEA,MAAMO,wBAAwD,GAAG,EAAjE;AACAJ,EAAAA,+BAA+B,CAACf,MAAhC,CAAuC,UAACC,GAAD,EAAMC,IAAN,EAAe;AACpD,QAAMkB,KAAK,GAAGb,UAAU,CAACc,MAAX,CAAkB,UAAAZ,IAAI;AAAA,aAAInB,SAAS,CAAC,IAAIqB,IAAJ,CAASF,IAAI,CAACG,IAAd,CAAD,EAAsBV,IAAtB,CAAb;AAAA,KAAtB,CAAd;AACA,QAAMoB,cAAc,GAAGT,kBAAkB,CAACQ,MAAnB,CAA0B,UAAAZ,IAAI;AAAA,aAAInB,SAAS,CAAC,IAAIqB,IAAJ,CAASF,IAAI,CAACG,IAAd,CAAD,EAAsBV,IAAtB,CAAb;AAAA,KAA9B,CAAvB;AACA,QAAMqB,WAAW,GAAGT,gBAAgB,CAACO,MAAjB,CAAwB,UAAAZ,IAAI;AAAA,aAAInB,SAAS,CAAC,IAAIqB,IAAJ,CAASF,IAAI,CAACG,IAAd,CAAD,EAAsBV,IAAtB,CAAb;AAAA,KAA5B,CAApB;AACAD,IAAAA,GAAG,CAACK,MAAJ,GAAaL,GAAG,CAACK,MAAJ,GAAaiB,WAAW,CAACL,MAAtC;AACAjB,IAAAA,GAAG,CAACuB,UAAJ,GAAiBvB,GAAG,CAACuB,UAAJ,GAAiBJ,KAAK,CAACF,MAAxC;AACAjB,IAAAA,GAAG,CAACI,SAAJ,GAAgBJ,GAAG,CAACI,SAAJ,GAAgBiB,cAAc,CAACJ,MAA/C;AAEAC,IAAAA,wBAAwB,CAACM,IAAzB;AAA+Bb,MAAAA,IAAI,EAAEV,IAAI,CAACwB,OAAL,EAArC;AAAqDC,MAAAA,eAAe,EAAEP,KAAK,CAACF;AAA5E,OAAsFjB,GAAtF;AAEA,WAAOA,GAAP;AACD,GAXD,EAWG;AAACuB,IAAAA,UAAU,EAAE,CAAb;AAAgBlB,IAAAA,MAAM,EAAE,CAAxB;AAA2BD,IAAAA,SAAS,EAAE;AAAtC,GAXH;AAaA,MAAMuB,aAAa,GAAGxC,GAAG,CAAC,IAAIuB,IAAJ,EAAD,EAAa;AAAEkB,IAAAA,IAAI,EAAE;AAAR,GAAb,CAAzB;AACA,MAAMC,8BAA8B,GAAGX,wBAAwB,CAACE,MAAzB,CAAgC,UAAAZ,IAAI;AAAA,WAAIA,IAAI,CAACG,IAAL,GAAYgB,aAAa,CAACF,OAAd,EAAhB;AAAA,GAApC,CAAvC;AAGA,SAAO;AACLP,IAAAA,wBAAwB,EAAxBA,wBADK;AAELW,IAAAA,8BAA8B,EAA9BA;AAFK,GAAP;AAKD,CAnCM;AAqCP,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAC3B,SAAD,EAAyBE,MAAzB,EAA2CD,SAA3C,EAAmG;AAElI,MAAM2B,iBAAiB,GAAG7B,iBAAiB,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,MAAvB,CAAjB,CAAgDwB,8BAA1E;AAEA,MAAMG,OAAO,GAAGD,iBAAiB,CAACxB,GAAlB,CAAsB,UAAC0B,CAAD,EAAGC,CAAH;AAAA,WAASA,CAAC,GAAG,CAAb;AAAA,GAAtB,CAAhB;AACA,MAAMX,UAAU,GAAGQ,iBAAiB,CAACxB,GAAlB,CAAsB,UAAA0B,CAAC;AAAA,WAAIA,CAAC,CAACV,UAAN;AAAA,GAAvB,CAAnB;AAEA,MAAMY,CAAC,GAAGH,OAAV;AACA,MAAMI,CAAC,GAAGb,UAAV;AAEA,MAAMc,UAAU,GAAG,IAAI5C,qBAAJ,CAA0B0C,CAA1B,EAA6BC,CAA7B,CAAnB;AAEA,MAAME,gBAAgB,GAAGC,KAAK,CAACC,IAAN,CAAW,IAAID,KAAJ,CAAU,EAAV,CAAX,EAA0BhC,GAA1B,CAA8B,UAAC4B,CAAD,EAAGD,CAAH,EAAS;AAC9D,QAAMvB,IAAI,GAAG,IAAID,IAAJ,CAASqB,iBAAiB,CAAC,CAAD,CAAjB,CAAqBpB,IAA9B,CAAb;AAEAA,IAAAA,IAAI,CAAC8B,OAAL,CAAa9B,IAAI,CAAC+B,OAAL,KAAiBR,CAA9B;AACA,WAAO;AAACvB,MAAAA,IAAI,EAAEA,IAAI,CAACc,OAAL,EAAP;AAAuBF,MAAAA,UAAU,EAAEoB,IAAI,CAACC,KAAL,CAAWP,UAAU,CAACQ,OAAX,CAAmBX,CAAnB,CAAX,MAAsC,CAAtC,GAA0C,IAA1C,GAAiDS,IAAI,CAACC,KAAL,CAAWP,UAAU,CAACQ,OAAX,CAAmBX,CAAnB,CAAX;AAApF,KAAP;AACD,GALwB,CAAzB;AAOA,SAAO;AAAEI,IAAAA,gBAAgB,EAAhBA,gBAAF;AAAoBQ,IAAAA,KAAK,EAAER,gBAAgB,CAAC,EAAD,CAAhB,CAAqB3B;AAAhD,GAAP;AAED,CArBM;AAuBP,OAAO,IAAMoC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAC5C,SAAD,EAA4B;AACjE,MAAM6C,WAAW,GAAGzD,OAAO,CAACY,SAAD,EAAY,oBAAZ,CAA3B;AAEA,MAAM8C,oBAAoB,GAAGC,MAAM,CAACC,OAAP,CAAeH,WAAf,EAA4BzC,GAA5B,CAAgC,UAAC6C,KAAD;AAAA;;AAAA,WAAY;AACvExD,MAAAA,IAAI,EAAEwD,KAAK,CAAC,CAAD,CAD4D;AAEvE7B,MAAAA,UAAU,EAAE6B,KAAK,CAAC,CAAD,CAAL,CAASnC,MAFkD;AAGvE;AACApB,MAAAA,MAAM,EAAE8C,IAAI,CAACC,KAAL,CAAW,0BAAAjD,kBAAkB,CAAC0D,IAAnB,CAAwB,UAAAnB,CAAC;AAAA,eAAIA,CAAC,CAACtC,IAAF,KAAWwD,KAAK,CAAC,CAAD,CAApB;AAAA,OAAzB,iFAAmDvD,MAAnD,IAA4DC,WAA5D,GAA0E,GAArF;AAJ+D,KAAZ;AAAA,GAAhC,CAA7B;AAOA,MAAMwD,8BAA8B,GAAGJ,MAAM,CAACC,OAAP,CAAeH,WAAf,EAA4BzC,GAA5B,CAAgC,UAAC6C,KAAD;AAAA;;AAAA,WAAY;AACjFxD,MAAAA,IAAI,EAAEwD,KAAK,CAAC,CAAD,CADsE;AAEjF7B,MAAAA,UAAU,EAAEoB,IAAI,CAACC,KAAL,CAAWQ,KAAK,CAAC,CAAD,CAAL,CAASnC,MAAT,GAAkBd,SAAS,CAACc,MAA5B,GAAqC,GAAhD,CAFqE;AAGjF;AACApB,MAAAA,MAAM,EAAE8C,IAAI,CAACC,KAAL,CAAW,2BAAAjD,kBAAkB,CAAC0D,IAAnB,CAAwB,UAAAnB,CAAC;AAAA,eAAIA,CAAC,CAACtC,IAAF,KAAWwD,KAAK,CAAC,CAAD,CAApB;AAAA,OAAzB,mFAAmDvD,MAAnD,IAA4DC,WAA5D,GAA0E,GAArF,CAJyE;AAKjF;AACAyD,MAAAA,WAAW,EAAEZ,IAAI,CAACC,KAAL,CAAWQ,KAAK,CAAC,CAAD,CAAL,CAASnC,MAAT,8BAAkBtB,kBAAkB,CAAC0D,IAAnB,CAAwB,UAAAnB,CAAC;AAAA,eAAIA,CAAC,CAACtC,IAAF,KAAWwD,KAAK,CAAC,CAAD,CAApB;AAAA,OAAzB,CAAlB,2DAAkB,uBAAmDvD,MAArE,IAA8E,GAA9E,GAAoF,KAA/F,IAAwG;AANpC,KAAZ;AAAA,GAAhC,CAAvC;AASA,MAAM2D,KAAK,GAAGN,MAAM,CAACC,OAAP,CAAeH,WAAf,EAA4BzC,GAA5B,CAAgC,UAAC6C,KAAD;AAAA,WAAYA,KAAK,CAAC,CAAD,CAAjB;AAAA,GAAhC,CAAd;AACA,SAAO;AACLH,IAAAA,oBAAoB,EAApBA,oBADK;AAELK,IAAAA,8BAA8B,EAA9BA,8BAFK;AAGLE,IAAAA,KAAK,EAALA;AAHK,GAAP;AAKD,CAzBM;AA2BP,OAAO,IAAMC,4BAA4B,GAAG,SAA/BA,4BAA+B,CAACtD,SAAD,EAA4B;AACtE,MAAM6C,WAAW,GAAGzD,OAAO,CAACY,SAAD,EAAY,wBAAZ,CAA3B;AAEA,MAAMuD,yBAAyB,GAAGR,MAAM,CAACC,OAAP,CAAeH,WAAf,EAA4BzC,GAA5B,CAAgC,UAAC6C,KAAD;AAAA,WAAY;AAC5ExD,MAAAA,IAAI,EAAEwD,KAAK,CAAC,CAAD,CAAL,KAAa,MAAb,GAAsB,aAAtB,GAAsCA,KAAK,CAAC,CAAD,CAD2B;AAE5E7B,MAAAA,UAAU,EAAE6B,KAAK,CAAC,CAAD,CAAL,CAASnC;AAFuD,KAAZ;AAAA,GAAhC,CAAlC;AAKA,MAAMuC,KAAK,GAAGN,MAAM,CAACC,OAAP,CAAeH,WAAf,EAA4BzC,GAA5B,CAAgC,UAAC6C,KAAD;AAAA,WAAYA,KAAK,CAAC,CAAD,CAAjB;AAAA,GAAhC,CAAd;AACA,SAAO;AACLM,IAAAA,yBAAyB,EAAzBA,yBADK;AAELF,IAAAA,KAAK,EAALA;AAFK,GAAP;AAID,CAbM;;AAeP,IAAMG,QAAQ,GAAG,SAAXA,QAAW,CAACC,SAAD,EAAuBzD,SAAvB,EAAiE;AAChF,MAAI,OAAOyD,SAAS,CAACC,eAAjB,KAAqC,QAAzC,EAAmD;AACjD,QAAMrD,IAAI,GAAGL,SAAS,CAACkD,IAAV,CAAe,UAAAnB,CAAC;AAAA,aAAI4B,MAAM,CAAC5B,CAAC,CAAC6B,EAAH,CAAN,KAAiBH,SAAS,CAACC,eAA/B;AAAA,KAAhB,CAAb;;AACA,QAAIrD,IAAJ,EAAU;AACR,UAAI,OAAOA,IAAI,CAACqD,eAAZ,KAAgC,QAApC,EAA8C;AAC5C,eAAOF,QAAQ,CAACnD,IAAD,EAAOL,SAAP,CAAf;AACD;;AACD,UAAIK,IAAI,CAACwD,sBAAT,EAAiC;AAC/B,eAAOxD,IAAI,CAACwD,sBAAZ;AACD;;AACD,aAAO,IAAP;AACD;AACF;;AACD,SAAOJ,SAAS,CAACI,sBAAjB;AACD,CAdD;;AAgBA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAC9D,SAAD,EAA4B;AAC5D,MAAM+D,eAAe,GAAG/D,SAAS,CAACiB,MAAV,CAAiB,UAAAwC,SAAS;AAAA,WAAItE,OAAO,CAAC,IAAIoB,IAAJ,CAASkD,SAAS,CAACjD,IAAnB,CAAD,CAAX;AAAA,GAA1B,CAAxB;AACA,SAAOuD,eAAe,CAACjD,MAAhB,IAA0B,CAAjC;AACD,CAHM;AAKP,OAAO,IAAMkD,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAChE,SAAD,EAA4B;AAE7D,MAAMiE,gBAAgB,GAAG7B,KAAK,CAACC,IAAN,CAAW,IAAI6B,GAAJ,CAAQlE,SAAS,CAACiB,MAAV,CAAiB,UAAAc,CAAC;AAAA,WAAI,OAAOA,CAAC,CAAC2B,eAAT,KAA6B,QAAjC;AAAA,GAAlB,EAA6DtD,GAA7D,CAAiE,UAAA+D,GAAG;AAAA,WAAIA,GAAG,CAACT,eAAR;AAAA,GAApE,CAAR,CAAX,CAAzB;AAEA,MAAMU,eAAe,GAAGhC,KAAK,CAACC,IAAN,CAAW,IAAI6B,GAAJ,CAAQlE,SAAS,CAACiB,MAAV,CAAiB,UAAAc,CAAC;AAAA,WAAI,CAAC,CAACA,CAAC,CAAC8B,sBAAR;AAAA,GAAlB,EAAkDzD,GAAlD,CAAsD,UAAAiE,IAAI;AAAA,WAAIA,IAAI,CAACR,sBAAT;AAAA,GAA1D,CAAR,CAAX,CAAxB;AAEA,MAAMS,QAAQ,GAAGtE,SAAS,CAACI,GAAV,CAAc,UAACqD,SAAD,EAAYc,KAAZ;AAAA;AAC7BA,MAAAA,KAAK,EAAEA,KAAK,GAAG;AADc,OAE1Bd,SAF0B;AAG7BG,MAAAA,EAAE,EAAED,MAAM,CAACF,SAAS,CAACG,EAAX,CAHmB;AAI7BY,MAAAA,KAAK,cAAOD,KAAK,GAAG,CAAf,CAJwB;AAK7B;AACAE,MAAAA,KAAK,YAAKlF,MAAM,CAAC6E,eAAe,CAACM,OAAhB,CAAwBjB,SAAS,CAACI,sBAAlC,CAAD,CAAX;AANwB;AAAA,GAAd,CAAjB;AAQA,MAAMc,KAAK,GAAGL,QAAQ,CAACrD,MAAT,CAAgB,UAAAc,CAAC;AAAA,WAAIkC,gBAAgB,CAACW,QAAjB,CAA0B7C,CAAC,CAAC6B,EAA5B,KAAmC,OAAO7B,CAAC,CAAC2B,eAAT,KAA6B,QAApE;AAAA,GAAjB,CAAd,CAd6D,CAe7D;;AACA,MAAMmB,KAAK,GAAGP,QAAQ,CAAClE,GAAT,CAAa,UAAA2B,CAAC;AAAA,WAAK;AAC/BM,MAAAA,IAAI,EAAE,OAAON,CAAC,CAAC2B,eAAT,KAA6B,QAA7B,GAAwC3B,CAAC,CAAC2B,eAA1C,GAA4D3B,CAAC,CAAC8B,sBADrC;AAE/BiB,MAAAA,EAAE,EAAE/C,CAAC,CAAC6B;AAFyB,KAAL;AAAA,GAAd,CAAd;AAIA,MAAMmB,aAAa,GAAGT,QAAQ,CAACrD,MAAT,CAAgB,UAAAc,CAAC;AAAA,WAAI,CAAC,CAACA,CAAC,CAAC8B,sBAAJ,IAA8B,OAAO9B,CAAC,CAAC2B,eAAT,KAA6B,QAA/D;AAAA,GAAjB,CAAtB,CApB6D,CAqB7D;;AACAU,EAAAA,eAAe,CAAChE,GAAhB,CAAoB,UAAC4E,OAAD,EAAUT,KAAV;AAAA,WAAoBQ,aAAa,CAAC1D,IAAd,CAAmB;AAAEuC,MAAAA,EAAE,EAAEoB,OAAN;AAAeR,MAAAA,KAAK,EAAEQ,OAAtB;AAA+BP,MAAAA,KAAK,YAAKlF,MAAM,CAAC6E,eAAe,CAACM,OAAhB,CAAwBM,OAAxB,CAAD,CAAX;AAApC,KAAnB,CAApB;AAAA,GAApB;AACA,SAAO;AACLL,IAAAA,KAAK,EAAEI,aADF;AAELF,IAAAA,KAAK,EAALA;AAFK,GAAP;AAID,CA3BM","sourcesContent":["import { format, sub, eachDayOfInterval, isSameDay, isToday } from 'date-fns';\nimport groupBy from 'lodash.groupby'\nimport sortBy from 'lodash.sortby'\nimport ExponentialRegression from 'ml-regression-exponential'\nimport { Confirmed, Recovered, Deaths } from '../pages';\n\n// Map data to show development of infections\nexport const colors = [\n  '#003f5c',\n  '#2fab8e',\n  '#665191',\n  '#a05195',\n  '#d45087',\n  '#f95d6a',\n  '#ff7c43',\n  '#ffa600',\n  '#ee2320',\n];\n\nexport const healtCareDistricts = [\n  { name: 'HUS', people: 1651715 },\n  { name: 'Etelä-Karjala', people: 129865 },\n  { name: 'Kymenlaakso', people: 168691 },\n  { name: 'Päijät-Häme', people: 211957 },\n  { name: 'Pohjois-Savo', people: 246653 },\n  { name: 'Etelä-Savo', people: 101518 },\n  { name: 'Itä-Savo', people: 42221 },\n  { name: 'Keski-Suomi', people: 252902 },\n  { name: 'Pohjois-Karjala', people: 166441 },\n  { name: 'Pohjois-Pohjanmaa', people: 409043 },\n  { name: 'Kainuu', people: 73959 },\n  { name: 'Keski-Pohjanmaa', people: 78124 },\n  { name: 'Lappi', people: 117447 },\n  { name: 'Länsi-Pohja', people: 61776 },\n  { name: 'Pirkanmaa', people: 532261 },\n  { name: 'Etelä-Pohjanmaa', people: 195583 },\n  { name: 'Kanta-Häme', people: 172720 },\n  { name: 'Varsinais-Suomi', people: 480626 },\n  { name: 'Satakunta', people: 220398 },\n  { name: 'Vaasa', people: 169741 }\n];\n\nconst peopleTotal = healtCareDistricts.reduce((acc, curr) => curr.people + acc, 0);\n\ninterface InfectionDevelopmentDataItem {\n  date: number;\n  infections: number;\n  deaths: number;\n  recovered: number;\n  infectionsDaily: number;\n};\n\ninterface InfectionDevelopment60DaysDataItem {\n  date: number;\n  infections: number | null;\n};\n\ninterface InfectionDevelopmentDataObj {\n  prediction60Days: InfectionDevelopment60DaysDataItem[];\n  today: number;\n}\n\nexport const getTimeSeriesData = (confirmed: Confirmed[], recovered: Recovered[], deaths: Deaths[]): {\n  infectionDevelopmentData: InfectionDevelopmentDataItem[]\n  infectionDevelopmentData30Days: InfectionDevelopmentDataItem[]\n} => {\n\n  const sortedData = sortBy(confirmed, 'date').map(item => ({ ...item, dateString: format(new Date(item.date), 'yyyy-MM-dd') }));\n  const sortedDataRecoverd = sortBy(recovered, 'date').map(item => ({ ...item, dateString: format(new Date(item.date), 'yyyy-MM-dd') }));\n  const sortedDataDeaths = sortBy(deaths, 'date').map(item => ({ ...item, dateString: format(new Date(item.date), 'yyyy-MM-dd') }));\n\n\n  const daysIntervalSinceFirstInfection = eachDayOfInterval({ start: new Date(sortedData[0].date), end: new Date(sortedData[sortedData.length - 1].date) });\n\n  const infectionDevelopmentData: InfectionDevelopmentDataItem[] = []\n  daysIntervalSinceFirstInfection.reduce((acc, curr) => {\n    const items = sortedData.filter(item => isSameDay(new Date(item.date), curr));\n    const itemsRecovered = sortedDataRecoverd.filter(item => isSameDay(new Date(item.date), curr));\n    const itemsDeaths = sortedDataDeaths.filter(item => isSameDay(new Date(item.date), curr));\n    acc.deaths = acc.deaths + itemsDeaths.length;\n    acc.infections = acc.infections + items.length;\n    acc.recovered = acc.recovered + itemsRecovered.length;\n    \n    infectionDevelopmentData.push({date: curr.getTime(), infectionsDaily: items.length,...acc})\n\n    return acc\n  }, {infections: 0, deaths: 0, recovered: 0})\n\n  const thirtyDaysAgo = sub(new Date(), { days: 30 });\n  const infectionDevelopmentData30Days = infectionDevelopmentData.filter(item => item.date > thirtyDaysAgo.getTime());\n\n\n  return {\n    infectionDevelopmentData,\n    infectionDevelopmentData30Days,\n  };\n\n}\n\nexport const getPredictionData = (confirmed: Confirmed[], deaths: Deaths[], recovered: Recovered[]): InfectionDevelopmentDataObj => {\n\n  const currentData30Days = getTimeSeriesData(confirmed, recovered, deaths).infectionDevelopmentData30Days\n\n  const indexes = currentData30Days.map((d,i) => i + 1);\n  const infections = currentData30Days.map(d => d.infections);\n\n  const x = indexes\n  const y = infections\n\n  const regression = new ExponentialRegression(x, y);\n\n  const prediction60Days = Array.from(new Array(60)).map((x,i) => {\n    const date = new Date(currentData30Days[0].date)\n\n    date.setDate(date.getDate() + i)\n    return {date: date.getTime(), infections: Math.round(regression.predict(i)) === 0 ? null : Math.round(regression.predict(i))}\n  })\n\n  return { prediction60Days, today: prediction60Days[29].date }\n\n}\n\nexport const getTnfectionsByDistrict = (confirmed: Confirmed[]) => {\n  const groupedData = groupBy(confirmed, 'healthCareDistrict');\n\n  const infectionsByDistrict = Object.entries(groupedData).map((value) => ({\n    name: value[0],\n    infections: value[1].length,\n    // @ts-ignore\n    people: Math.round(healtCareDistricts.find(i => i.name === value[0])?.people / peopleTotal * 100)\n  }))\n\n  const infectionsByDistrictPercentage = Object.entries(groupedData).map((value) => ({\n    name: value[0],\n    infections: Math.round(value[1].length / confirmed.length * 100),\n    // @ts-ignore\n    people: Math.round(healtCareDistricts.find(i => i.name === value[0])?.people / peopleTotal * 100),\n    // @ts-ignore\n    perDistrict: Math.round(value[1].length / healtCareDistricts.find(i => i.name === value[0])?.people * 100 * 10000) / 10000,\n  }))\n\n  const areas = Object.entries(groupedData).map((value) => (value[0]));\n  return {\n    infectionsByDistrict,\n    infectionsByDistrictPercentage,\n    areas\n  };\n}\n\nexport const getInfectionsBySourceCountry = (confirmed: Confirmed[]) => {\n  const groupedData = groupBy(confirmed, 'infectionSourceCountry');\n\n  const infectionsBySourceCountry = Object.entries(groupedData).map((value) => ({\n    name: value[0] === 'null' ? 'Ei tiedossa' : value[0],\n    infections: value[1].length\n  }))\n\n  const areas = Object.entries(groupedData).map((value) => (value[0]));\n  return {\n    infectionsBySourceCountry,\n    areas\n  };\n}\n\nconst getGroup = (infection: Confirmed, confirmed: Confirmed[]): string | null => {\n  if (typeof infection.infectionSource === 'number') {\n    const item = confirmed.find(i => Number(i.id) === infection.infectionSource);\n    if (item) {\n      if (typeof item.infectionSource === 'number') {\n        return getGroup(item, confirmed);\n      }\n      if (item.infectionSourceCountry) {\n        return item.infectionSourceCountry;\n      }\n      return null;\n    }\n  }\n  return infection.infectionSourceCountry;\n}\n\nexport const getInfectionsToday = (confirmed: Confirmed[]) => {\n  const infectionsToday = confirmed.filter(infection => isToday(new Date(infection.date)));\n  return infectionsToday.length || 0;\n}\n\nexport const getNetworkGraphData = (confirmed: Confirmed[]) => {\n\n  const infectionSources = Array.from(new Set(confirmed.filter(i => typeof i.infectionSource === 'number').map(inf => inf.infectionSource)));\n\n  const uniqueCountries = Array.from(new Set(confirmed.filter(i => !!i.infectionSourceCountry).map(inff => inff.infectionSourceCountry)));\n\n  const allNodes = confirmed.map((infection, index) => ({\n    index: index + 1,\n    ...infection,\n    id: Number(infection.id),\n    label: `#0${index + 1}`,\n    // group: getGroup(infection, confirmed),\n    color: `${colors[uniqueCountries.indexOf(infection.infectionSourceCountry)]}`,\n  }));\n  const nodes = allNodes.filter(i => infectionSources.includes(i.id) || typeof i.infectionSource === 'number');\n  // @ts-ignore\n  const edges = allNodes.map(i => ({\n    from: typeof i.infectionSource === 'number' ? i.infectionSource : i.infectionSourceCountry,\n    to: i.id,\n  }));\n  const filteredNodes = allNodes.filter(i => !!i.infectionSourceCountry || typeof i.infectionSource === 'number');\n  // @ts-ignore\n  uniqueCountries.map((country, index) => filteredNodes.push({ id: country, label: country, color: `${colors[uniqueCountries.indexOf(country)]}` }))\n  return {\n    nodes: filteredNodes,\n    edges\n  };\n}\n"]},"metadata":{},"sourceType":"module"}