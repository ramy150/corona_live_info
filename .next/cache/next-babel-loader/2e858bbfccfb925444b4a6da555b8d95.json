{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Volumes/Disk/works/react/corona_live_info/components/NetworkGraph.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport Graph from \"react-graph-vis\";\n\nvar NetworkGraph = function NetworkGraph(_ref) {\n  var data = _ref.data;\n\n  var _useState = useState(false),\n      isComponentMounted = _useState[0],\n      setIsComponentMounted = _useState[1];\n\n  useEffect(function () {\n    return setIsComponentMounted(true);\n  }, []);\n\n  if (!isComponentMounted) {\n    return null;\n  }\n\n  var options = _defineProperty({\n    layout: {\n      hierarchical: false\n    },\n    edges: {\n      color: \"#000000\",\n      width: 2,\n      smooth: true\n    },\n    height: \"600px\",\n    nodes: {\n      // shape: \"dot\",\n      size: 30,\n      font: {\n        size: 22,\n        face: 'Space Mono',\n        color: \"#fff\"\n      },\n      borderWidth: 2\n    },\n    autoResize: true\n  }, \"layout\", {\n    improvedLayout: true,\n    clusterThreshold: 150\n  });\n\n  var events = {\n    select: function select(event) {\n      var nodes = event.nodes,\n          edges = event.edges;\n    }\n  };\n  return __jsx(Graph, {\n    graph: data,\n    options: options,\n    events: events,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  });\n};\n\nexport default NetworkGraph;","map":{"version":3,"sources":["/Volumes/Disk/works/react/corona_live_info/components/NetworkGraph.js"],"names":["useState","useEffect","Graph","NetworkGraph","data","isComponentMounted","setIsComponentMounted","options","layout","hierarchical","edges","color","width","smooth","height","nodes","size","font","face","borderWidth","autoResize","improvedLayout","clusterThreshold","events","select","event"],"mappings":";;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,iBAAlB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAAA,kBACmBJ,QAAQ,CAAC,KAAD,CAD3B;AAAA,MAC1BK,kBAD0B;AAAA,MACNC,qBADM;;AAGjCL,EAAAA,SAAS,CAAC;AAAA,WAAMK,qBAAqB,CAAC,IAAD,CAA3B;AAAA,GAAD,EAAoC,EAApC,CAAT;;AAEA,MAAG,CAACD,kBAAJ,EAAwB;AACtB,WAAO,IAAP;AACD;;AACD,MAAME,OAAO;AACXC,IAAAA,MAAM,EAAE;AACNC,MAAAA,YAAY,EAAE;AADR,KADG;AAIXC,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE,SADF;AAELC,MAAAA,KAAK,EAAE,CAFF;AAGLC,MAAAA,MAAM,EAAE;AAHH,KAJI;AASXC,IAAAA,MAAM,EAAE,OATG;AAUXC,IAAAA,KAAK,EAAE;AACL;AACAC,MAAAA,IAAI,EAAE,EAFD;AAGLC,MAAAA,IAAI,EAAE;AACJD,QAAAA,IAAI,EAAE,EADF;AAEJE,QAAAA,IAAI,EAAE,YAFF;AAGJP,QAAAA,KAAK,EAAE;AAHH,OAHD;AAQLQ,MAAAA,WAAW,EAAE;AARR,KAVI;AAoBXC,IAAAA,UAAU,EAAE;AApBD,eAqBH;AACNC,IAAAA,cAAc,EAAE,IADV;AAENC,IAAAA,gBAAgB,EAAE;AAFZ,GArBG,CAAb;;AA2BA,MAAMC,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAE,gBAASC,KAAT,EAAgB;AAAA,UAChBV,KADgB,GACCU,KADD,CAChBV,KADgB;AAAA,UACTL,KADS,GACCe,KADD,CACTf,KADS;AAEvB;AAHY,GAAf;AAKA,SACE,MAAC,KAAD;AACE,IAAA,KAAK,EAAEN,IADT;AAEE,IAAA,OAAO,EAAEG,OAFX;AAGE,IAAA,MAAM,EAAEgB,MAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAOD,CA/CD;;AAiDA,eAAepB,YAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport Graph from \"react-graph-vis\";\n\nconst NetworkGraph = ({ data }) => {\n  const [isComponentMounted, setIsComponentMounted] = useState(false)\n\n  useEffect(() => setIsComponentMounted(true), [])\n\n  if(!isComponentMounted) {\n    return null\n  }\n  const options = {\n    layout: {\n      hierarchical: false\n    },\n    edges: {\n      color: \"#000000\",\n      width: 2,\n      smooth: true,\n    },\n    height: \"600px\",\n    nodes: {\n      // shape: \"dot\",\n      size: 30,\n      font: {\n        size: 22,\n        face: 'Space Mono',\n        color: \"#fff\"\n      },\n      borderWidth: 2\n    },\n    autoResize: true, \n    layout: {\n      improvedLayout: true,\n      clusterThreshold: 150,\n    }\n  };\n\n  const events = {\n    select: function(event) {\n      var { nodes, edges } = event;\n    }\n  };\n  return (\n    <Graph\n      graph={data}\n      options={options}\n      events={events}\n    />\n  );\n}\n\nexport default NetworkGraph;"]},"metadata":{},"sourceType":"module"}